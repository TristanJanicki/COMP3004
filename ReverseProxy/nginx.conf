user nginx;
worker_processes 1; # optimally it should be 1 process per CPU

error_log /var/log/nginx/error.log debug;
pid /var/run/nginx.pid;
load_module modules/ngx_http_js_module.so;

events {
	worker_connections 1024;
}

http {
	log_format verbose '$remote_addr - $remote_user [$time_local]'
	'"$request" $status $body_bytes_sent '
	'"$http_referer" "$http_user_agent"';
	access_log /var/log/nginx/access.log verbose;
	js_include header_injector.js;

	add_header 'Access-Control-Allow-Origin' '*' always;
	add_header 'Access-Control-Allow-Credentials' '*' always;
	add_header 'Access-Control-Allow-Headers' 'X-Request-ID, idToken, user-id, Content-Type, Refresh-Token, Access-Token' always;
	add_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH' always;
	js_set $token getToken;
	js_set $userid getUserID;

	#                           upstream blocks for each of our services.
	#                           each block can contain multiple server directives.
	#                           requests will be load balanced across all server directives using the epoll method.

	upstream user-accounts-service {
		server 18.233.96.28:8080;
	}

	# upstream data-service {
	# 	server                     127.0.0.1:8080;
	# }

	upstream experiments-service {
		server                     34.227.28.92:8080;
	}
	
	# upstream notifications-service {
	# 	server                     127.0.0.1:8080;
	# }
	server {
		#                          set which port this nginx server listens on
		listen 80;

		#                          Handling the pre-flight CORS request
		if ($request_method = 'OPTIONS') {
			return 200 'ok';
		}

		######################                                Internal request to verify the JWT tokens we receive in some requests ########################################
		location = /verifyJWT {
			internal;
			proxy_pass http://user-accounts-service/v1/users/verifyJwt;
			proxy_pass_request_body off;
			proxy_set_header Content-Length "";
			proxy_set_header X-Original-URI $request_uri;
			proxy_set_header token $token;
			proxy_method GET;
		}


		##################### Some user account endpoints don't require authentication.
		location ~* /v1/users/(signup|signin|authchallenge|recovery) {
			proxy_pass http://user-accounts-service;
		}


		location /v1 {
			############                                         Make a request to the user-accounts service to verify the jwt token ##############
			auth_request /verifyJWT;
			auth_request_set $auth_status $upstream_status;
			###########                                          If the token is valid then inject the customer-id and user-id into the request #########
			proxy_set_header user-id $userid;

			location /v1/users{
				proxy_pass http://user-accounts-service;
			}

			# location /v1/data {
			# 	proxy_pass               http://data-service;
			# }

			location /v1/experiments {
				proxy_pass               http://experiments-service;
			}

			# location /v1/notifications {
			# 	proxy_pass               http://notifications-service;
			# }
		}
	}
}