 user                        nginx;
 worker_processes            1; # optimally it should be 1 process per CPU

 error_log                   /var/log/nginx/error.log debug;
 pid                         /var/run/nginx.pid;
 load_module                 modules/ngx_http_js_module.so;

events {
	worker_connections          1024;
}

http {
	log_format                  verbose '$remote_addr - $remote_user [$time_local]'
	'"$request"                 $status $body_bytes_sent '
	'"$http_referer"            "$http_user_agent"';
	access_log                  /var/log/nginx/access.log verbose;
	js_include                  header_injector.js;

	add_header                  'Access-Control-Allow-Origin' '*' always;
	add_header                  'Access-Control-Allow-Credentials' '*' always;
	add_header                  'Access-Control-Allow-Headers' 'X-Request-ID, idToken, user-id, Content-Type, Refresh-Token, Access-Token' always;
	add_header                  'Access-Control-Allow-Methods' 'GET,POST,OPTIONS,PUT,DELETE,PATCH' always;
	#js_set                     $validJWT verifyJWT;
	js_set                      $userid getUserID;
	js_set                      $customerid getCustomerID;

	#                           upstream blocks for each of our services.
	#                           each block can contain multiple server directives.
	#                           requests will be load balanced across all server directives using the epoll method.

	upstream user-accounts-service {
		server                     127.0.0.1:8080;
	}

	upstream data-service {
		server                     127.0.0.1:8080;
	}

	upstream experiments-service {
		server                     127.0.0.1:8080;
	}

	upstream notifications-service {
		server                     127.0.0.1:8080;
	}

	server {
		#                          set which port this nginx server listens on
		listen                     8000;

		#                          Handling the pre-flight CORS request
		if ($request_method = 'OPTIONS') {
			return                    200 'ok';
		}

		#                          W.I.P
		#		if ($validJWT = false) {
		#                          return 401 'not authorized';
		#		}

		location /v1 {
			proxy_set_header          user-id $userid;
			location /v1/users {
				#                        auth_request /verifyJWT;
				#                        auth_request_set $auth_status $upstream_status;
				proxy_pass               http://user-accounts-service;
			}

			location /v1/data {
				proxy_pass               http://data-service;
			}

			location /v1/experiments {
				proxy_pass               http://experiments-service;
			}

			location /v1/notifications {
				proxy_pass               http://notifications-service;
			}
		}
	}
}
