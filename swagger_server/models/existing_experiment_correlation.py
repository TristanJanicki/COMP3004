# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ExistingExperimentCorrelation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, experiment_id: str=None, user_id: str=None, indicator: str=None, correlation: str=None, ticker: str=None):  # noqa: E501
        """ExistingExperimentCorrelation - a model defined in Swagger

        :param experiment_id: The experiment_id of this ExistingExperimentCorrelation.  # noqa: E501
        :type experiment_id: str
        :param user_id: The user_id of this ExistingExperimentCorrelation.  # noqa: E501
        :type user_id: str
        :param indicator: The indicator of this ExistingExperimentCorrelation.  # noqa: E501
        :type indicator: str
        :param correlation: The correlation of this ExistingExperimentCorrelation.  # noqa: E501
        :type correlation: str
        :param ticker: The ticker of this ExistingExperimentCorrelation.  # noqa: E501
        :type ticker: str
        """
        self.swagger_types = {
            'experiment_id': str,
            'user_id': str,
            'indicator': str,
            'correlation': str,
            'ticker': str
        }

        self.attribute_map = {
            'experiment_id': 'experiment_id',
            'user_id': 'userID',
            'indicator': 'indicator',
            'correlation': 'correlation',
            'ticker': 'ticker'
        }

        self._experiment_id = experiment_id
        self._user_id = user_id
        self._indicator = indicator
        self._correlation = correlation
        self._ticker = ticker

    @classmethod
    def from_dict(cls, dikt) -> 'ExistingExperimentCorrelation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The existingExperimentCorrelation of this ExistingExperimentCorrelation.  # noqa: E501
        :rtype: ExistingExperimentCorrelation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def experiment_id(self) -> str:
        """Gets the experiment_id of this ExistingExperimentCorrelation.


        :return: The experiment_id of this ExistingExperimentCorrelation.
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id: str):
        """Sets the experiment_id of this ExistingExperimentCorrelation.


        :param experiment_id: The experiment_id of this ExistingExperimentCorrelation.
        :type experiment_id: str
        """

        self._experiment_id = experiment_id

    @property
    def user_id(self) -> str:
        """Gets the user_id of this ExistingExperimentCorrelation.


        :return: The user_id of this ExistingExperimentCorrelation.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this ExistingExperimentCorrelation.


        :param user_id: The user_id of this ExistingExperimentCorrelation.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def indicator(self) -> str:
        """Gets the indicator of this ExistingExperimentCorrelation.


        :return: The indicator of this ExistingExperimentCorrelation.
        :rtype: str
        """
        return self._indicator

    @indicator.setter
    def indicator(self, indicator: str):
        """Sets the indicator of this ExistingExperimentCorrelation.


        :param indicator: The indicator of this ExistingExperimentCorrelation.
        :type indicator: str
        """

        self._indicator = indicator

    @property
    def correlation(self) -> str:
        """Gets the correlation of this ExistingExperimentCorrelation.


        :return: The correlation of this ExistingExperimentCorrelation.
        :rtype: str
        """
        return self._correlation

    @correlation.setter
    def correlation(self, correlation: str):
        """Sets the correlation of this ExistingExperimentCorrelation.


        :param correlation: The correlation of this ExistingExperimentCorrelation.
        :type correlation: str
        """

        self._correlation = correlation

    @property
    def ticker(self) -> str:
        """Gets the ticker of this ExistingExperimentCorrelation.


        :return: The ticker of this ExistingExperimentCorrelation.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker: str):
        """Sets the ticker of this ExistingExperimentCorrelation.


        :param ticker: The ticker of this ExistingExperimentCorrelation.
        :type ticker: str
        """

        self._ticker = ticker
