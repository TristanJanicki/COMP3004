// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"
	"strings"

	errors "github.com/go-openapi/errors"
	loads "github.com/go-openapi/loads"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	security "github.com/go-openapi/runtime/security"
	spec "github.com/go-openapi/spec"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewSwaggerRestAPI creates a new SwaggerRest instance
func NewSwaggerRestAPI(spec *loads.Document) *SwaggerRestAPI {
	return &SwaggerRestAPI{
		handlers:            make(map[string]map[string]http.Handler),
		formats:             strfmt.Default,
		defaultConsumes:     "application/json",
		defaultProduces:     "application/json",
		customConsumers:     make(map[string]runtime.Consumer),
		customProducers:     make(map[string]runtime.Producer),
		ServerShutdown:      func() {},
		spec:                spec,
		ServeError:          errors.ServeError,
		BasicAuthenticator:  security.BasicAuth,
		APIKeyAuthenticator: security.APIKeyAuth,
		BearerAuthenticator: security.BearerAuth,
		JSONConsumer:        runtime.JSONConsumer(),
		JSONProducer:        runtime.JSONProducer(),
		CompleteAuthChallengeHandler: CompleteAuthChallengeHandlerFunc(func(params CompleteAuthChallengeParams) middleware.Responder {
			return middleware.NotImplemented("operation CompleteAuthChallenge has not yet been implemented")
		}),
		CompletePasswordRecoveryHandler: CompletePasswordRecoveryHandlerFunc(func(params CompletePasswordRecoveryParams) middleware.Responder {
			return middleware.NotImplemented("operation CompletePasswordRecovery has not yet been implemented")
		}),
		CreateUserAccountHandler: CreateUserAccountHandlerFunc(func(params CreateUserAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation CreateUserAccount has not yet been implemented")
		}),
		DeleteUserAccountHandler: DeleteUserAccountHandlerFunc(func(params DeleteUserAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation DeleteUserAccount has not yet been implemented")
		}),
		GetAllUserAccountsHandler: GetAllUserAccountsHandlerFunc(func(params GetAllUserAccountsParams) middleware.Responder {
			return middleware.NotImplemented("operation GetAllUserAccounts has not yet been implemented")
		}),
		GetUserAccountHandler: GetUserAccountHandlerFunc(func(params GetUserAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation GetUserAccount has not yet been implemented")
		}),
		RequestPasswordRecoveryHandler: RequestPasswordRecoveryHandlerFunc(func(params RequestPasswordRecoveryParams) middleware.Responder {
			return middleware.NotImplemented("operation RequestPasswordRecovery has not yet been implemented")
		}),
		SignInHandler: SignInHandlerFunc(func(params SignInParams) middleware.Responder {
			return middleware.NotImplemented("operation SignIn has not yet been implemented")
		}),
		SignOutHandler: SignOutHandlerFunc(func(params SignOutParams) middleware.Responder {
			return middleware.NotImplemented("operation SignOut has not yet been implemented")
		}),
		SignUpHandler: SignUpHandlerFunc(func(params SignUpParams) middleware.Responder {
			return middleware.NotImplemented("operation SignUp has not yet been implemented")
		}),
		UpdateUserAccountHandler: UpdateUserAccountHandlerFunc(func(params UpdateUserAccountParams) middleware.Responder {
			return middleware.NotImplemented("operation UpdateUserAccount has not yet been implemented")
		}),
		VerifyJwtHandler: VerifyJwtHandlerFunc(func(params VerifyJwtParams) middleware.Responder {
			return middleware.NotImplemented("operation VerifyJwt has not yet been implemented")
		}),
		ChangePasswordHandler: ChangePasswordHandlerFunc(func(params ChangePasswordParams) middleware.Responder {
			return middleware.NotImplemented("operation ChangePassword has not yet been implemented")
		}),
		RefreshTokensHandler: RefreshTokensHandlerFunc(func(params RefreshTokensParams) middleware.Responder {
			return middleware.NotImplemented("operation RefreshTokens has not yet been implemented")
		}),
	}
}

/*SwaggerRestAPI A microservice for managing AWS cognito user accounts */
type SwaggerRestAPI struct {
	spec            *loads.Document
	context         *middleware.Context
	handlers        map[string]map[string]http.Handler
	formats         strfmt.Registry
	customConsumers map[string]runtime.Consumer
	customProducers map[string]runtime.Producer
	defaultConsumes string
	defaultProduces string
	Middleware      func(middleware.Builder) http.Handler

	// BasicAuthenticator generates a runtime.Authenticator from the supplied basic auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BasicAuthenticator func(security.UserPassAuthentication) runtime.Authenticator
	// APIKeyAuthenticator generates a runtime.Authenticator from the supplied token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	APIKeyAuthenticator func(string, string, security.TokenAuthentication) runtime.Authenticator
	// BearerAuthenticator generates a runtime.Authenticator from the supplied bearer token auth function.
	// It has a default implementation in the security package, however you can replace it for your particular usage.
	BearerAuthenticator func(string, security.ScopedTokenAuthentication) runtime.Authenticator

	// JSONConsumer registers a consumer for a "application/json" mime type
	JSONConsumer runtime.Consumer

	// JSONProducer registers a producer for a "application/json" mime type
	JSONProducer runtime.Producer

	// CompleteAuthChallengeHandler sets the operation handler for the complete auth challenge operation
	CompleteAuthChallengeHandler CompleteAuthChallengeHandler
	// CompletePasswordRecoveryHandler sets the operation handler for the complete password recovery operation
	CompletePasswordRecoveryHandler CompletePasswordRecoveryHandler
	// CreateUserAccountHandler sets the operation handler for the create user account operation
	CreateUserAccountHandler CreateUserAccountHandler
	// DeleteUserAccountHandler sets the operation handler for the delete user account operation
	DeleteUserAccountHandler DeleteUserAccountHandler
	// GetAllUserAccountsHandler sets the operation handler for the get all user accounts operation
	GetAllUserAccountsHandler GetAllUserAccountsHandler
	// GetUserAccountHandler sets the operation handler for the get user account operation
	GetUserAccountHandler GetUserAccountHandler
	// RequestPasswordRecoveryHandler sets the operation handler for the request password recovery operation
	RequestPasswordRecoveryHandler RequestPasswordRecoveryHandler
	// SignInHandler sets the operation handler for the sign in operation
	SignInHandler SignInHandler
	// SignOutHandler sets the operation handler for the sign out operation
	SignOutHandler SignOutHandler
	// SignUpHandler sets the operation handler for the sign up operation
	SignUpHandler SignUpHandler
	// UpdateUserAccountHandler sets the operation handler for the update user account operation
	UpdateUserAccountHandler UpdateUserAccountHandler
	// VerifyJwtHandler sets the operation handler for the verify jwt operation
	VerifyJwtHandler VerifyJwtHandler
	// ChangePasswordHandler sets the operation handler for the change password operation
	ChangePasswordHandler ChangePasswordHandler
	// RefreshTokensHandler sets the operation handler for the refresh tokens operation
	RefreshTokensHandler RefreshTokensHandler

	// ServeError is called when an error is received, there is a default handler
	// but you can set your own with this
	ServeError func(http.ResponseWriter, *http.Request, error)

	// ServerShutdown is called when the HTTP(S) server is shut down and done
	// handling all active connections and does not accept connections any more
	ServerShutdown func()

	// Custom command line argument groups with their descriptions
	CommandLineOptionsGroups []swag.CommandLineOptionsGroup

	// User defined logger function.
	Logger func(string, ...interface{})
}

// SetDefaultProduces sets the default produces media type
func (o *SwaggerRestAPI) SetDefaultProduces(mediaType string) {
	o.defaultProduces = mediaType
}

// SetDefaultConsumes returns the default consumes media type
func (o *SwaggerRestAPI) SetDefaultConsumes(mediaType string) {
	o.defaultConsumes = mediaType
}

// SetSpec sets a spec that will be served for the clients.
func (o *SwaggerRestAPI) SetSpec(spec *loads.Document) {
	o.spec = spec
}

// DefaultProduces returns the default produces media type
func (o *SwaggerRestAPI) DefaultProduces() string {
	return o.defaultProduces
}

// DefaultConsumes returns the default consumes media type
func (o *SwaggerRestAPI) DefaultConsumes() string {
	return o.defaultConsumes
}

// Formats returns the registered string formats
func (o *SwaggerRestAPI) Formats() strfmt.Registry {
	return o.formats
}

// RegisterFormat registers a custom format validator
func (o *SwaggerRestAPI) RegisterFormat(name string, format strfmt.Format, validator strfmt.Validator) {
	o.formats.Add(name, format, validator)
}

// Validate validates the registrations in the SwaggerRestAPI
func (o *SwaggerRestAPI) Validate() error {
	var unregistered []string

	if o.JSONConsumer == nil {
		unregistered = append(unregistered, "JSONConsumer")
	}

	if o.JSONProducer == nil {
		unregistered = append(unregistered, "JSONProducer")
	}

	if o.CompleteAuthChallengeHandler == nil {
		unregistered = append(unregistered, "CompleteAuthChallengeHandler")
	}

	if o.CompletePasswordRecoveryHandler == nil {
		unregistered = append(unregistered, "CompletePasswordRecoveryHandler")
	}

	if o.CreateUserAccountHandler == nil {
		unregistered = append(unregistered, "CreateUserAccountHandler")
	}

	if o.DeleteUserAccountHandler == nil {
		unregistered = append(unregistered, "DeleteUserAccountHandler")
	}

	if o.GetAllUserAccountsHandler == nil {
		unregistered = append(unregistered, "GetAllUserAccountsHandler")
	}

	if o.GetUserAccountHandler == nil {
		unregistered = append(unregistered, "GetUserAccountHandler")
	}

	if o.RequestPasswordRecoveryHandler == nil {
		unregistered = append(unregistered, "RequestPasswordRecoveryHandler")
	}

	if o.SignInHandler == nil {
		unregistered = append(unregistered, "SignInHandler")
	}

	if o.SignOutHandler == nil {
		unregistered = append(unregistered, "SignOutHandler")
	}

	if o.SignUpHandler == nil {
		unregistered = append(unregistered, "SignUpHandler")
	}

	if o.UpdateUserAccountHandler == nil {
		unregistered = append(unregistered, "UpdateUserAccountHandler")
	}

	if o.VerifyJwtHandler == nil {
		unregistered = append(unregistered, "VerifyJwtHandler")
	}

	if o.ChangePasswordHandler == nil {
		unregistered = append(unregistered, "ChangePasswordHandler")
	}

	if o.RefreshTokensHandler == nil {
		unregistered = append(unregistered, "RefreshTokensHandler")
	}

	if len(unregistered) > 0 {
		return fmt.Errorf("missing registration: %s", strings.Join(unregistered, ", "))
	}

	return nil
}

// ServeErrorFor gets a error handler for a given operation id
func (o *SwaggerRestAPI) ServeErrorFor(operationID string) func(http.ResponseWriter, *http.Request, error) {
	return o.ServeError
}

// AuthenticatorsFor gets the authenticators for the specified security schemes
func (o *SwaggerRestAPI) AuthenticatorsFor(schemes map[string]spec.SecurityScheme) map[string]runtime.Authenticator {

	return nil

}

// Authorizer returns the registered authorizer
func (o *SwaggerRestAPI) Authorizer() runtime.Authorizer {

	return nil

}

// ConsumersFor gets the consumers for the specified media types
func (o *SwaggerRestAPI) ConsumersFor(mediaTypes []string) map[string]runtime.Consumer {

	result := make(map[string]runtime.Consumer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONConsumer

		}

		if c, ok := o.customConsumers[mt]; ok {
			result[mt] = c
		}
	}
	return result

}

// ProducersFor gets the producers for the specified media types
func (o *SwaggerRestAPI) ProducersFor(mediaTypes []string) map[string]runtime.Producer {

	result := make(map[string]runtime.Producer)
	for _, mt := range mediaTypes {
		switch mt {

		case "application/json":
			result["application/json"] = o.JSONProducer

		}

		if p, ok := o.customProducers[mt]; ok {
			result[mt] = p
		}
	}
	return result

}

// HandlerFor gets a http.Handler for the provided operation method and path
func (o *SwaggerRestAPI) HandlerFor(method, path string) (http.Handler, bool) {
	if o.handlers == nil {
		return nil, false
	}
	um := strings.ToUpper(method)
	if _, ok := o.handlers[um]; !ok {
		return nil, false
	}
	if path == "/" {
		path = ""
	}
	h, ok := o.handlers[um][path]
	return h, ok
}

// Context returns the middleware context for the swagger rest API
func (o *SwaggerRestAPI) Context() *middleware.Context {
	if o.context == nil {
		o.context = middleware.NewRoutableContext(o.spec, o, nil)
	}

	return o.context
}

func (o *SwaggerRestAPI) initHandlerCache() {
	o.Context() // don't care about the result, just that the initialization happened

	if o.handlers == nil {
		o.handlers = make(map[string]map[string]http.Handler)
	}

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/users/authchallenge"] = NewCompleteAuthChallenge(o.context, o.CompleteAuthChallengeHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/users/recovery"] = NewCompletePasswordRecovery(o.context, o.CompletePasswordRecoveryHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/users/accounts"] = NewCreateUserAccount(o.context, o.CreateUserAccountHandler)

	if o.handlers["DELETE"] == nil {
		o.handlers["DELETE"] = make(map[string]http.Handler)
	}
	o.handlers["DELETE"]["/v1/users/accounts/{user_id}"] = NewDeleteUserAccount(o.context, o.DeleteUserAccountHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/users/accounts"] = NewGetAllUserAccounts(o.context, o.GetAllUserAccountsHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/users/accounts/{user_id}"] = NewGetUserAccount(o.context, o.GetUserAccountHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/users/recovery"] = NewRequestPasswordRecovery(o.context, o.RequestPasswordRecoveryHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/users/signin"] = NewSignIn(o.context, o.SignInHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/users/signout"] = NewSignOut(o.context, o.SignOutHandler)

	if o.handlers["POST"] == nil {
		o.handlers["POST"] = make(map[string]http.Handler)
	}
	o.handlers["POST"]["/v1/users/signup"] = NewSignUp(o.context, o.SignUpHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v1/users/accounts/{user_id}"] = NewUpdateUserAccount(o.context, o.UpdateUserAccountHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/users/verifyJwt"] = NewVerifyJwt(o.context, o.VerifyJwtHandler)

	if o.handlers["PATCH"] == nil {
		o.handlers["PATCH"] = make(map[string]http.Handler)
	}
	o.handlers["PATCH"]["/v1/users/password"] = NewChangePassword(o.context, o.ChangePasswordHandler)

	if o.handlers["GET"] == nil {
		o.handlers["GET"] = make(map[string]http.Handler)
	}
	o.handlers["GET"]["/v1/users/refresh"] = NewRefreshTokens(o.context, o.RefreshTokensHandler)

}

// Serve creates a http handler to serve the API over HTTP
// can be used directly in http.ListenAndServe(":8000", api.Serve(nil))
func (o *SwaggerRestAPI) Serve(builder middleware.Builder) http.Handler {
	o.Init()

	if o.Middleware != nil {
		return o.Middleware(builder)
	}
	return o.context.APIHandler(builder)
}

// Init allows you to just initialize the handler cache, you can then recompose the middleware as you see fit
func (o *SwaggerRestAPI) Init() {
	if len(o.handlers) == 0 {
		o.initHandlerCache()
	}
}

// RegisterConsumer allows you to add (or override) a consumer for a media type.
func (o *SwaggerRestAPI) RegisterConsumer(mediaType string, consumer runtime.Consumer) {
	o.customConsumers[mediaType] = consumer
}

// RegisterProducer allows you to add (or override) a producer for a media type.
func (o *SwaggerRestAPI) RegisterProducer(mediaType string, producer runtime.Producer) {
	o.customProducers[mediaType] = producer
}
