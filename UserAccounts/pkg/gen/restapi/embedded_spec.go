// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "A microservice for managing AWS cognito user accounts",
    "title": "User Accounts Service",
    "version": "0.1.0"
  },
  "paths": {
    "/internal/v1/users/verifyJwt": {
      "get": {
        "description": "Validates a JWT Token",
        "operationId": "VerifyJwt",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "name": "token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "Not Allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/internal/v1/users/{user_id}/permissions/agencyclients": {
      "get": {
        "description": "Get users agency clients permissions",
        "operationId": "GetAgencyClientsPermissions",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/agencyClientsPermissions"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/internal/v1/users/{user_id}/stats": {
      "patch": {
        "description": "Update user stats",
        "operationId": "UpdateUserStats",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "name": "stats",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userStatsData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/customers/accounts/": {
      "get": {
        "description": "Returns a customer",
        "operationId": "GetCustomerAccount",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id for the user who is making the request",
            "name": "proelium-user-id",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/customerAccount"
            }
          },
          "401": {
            "description": "Not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update customer account",
        "operationId": "UpdateCustomerAccount",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id for the user who is making the request",
            "name": "proelium-user-id",
            "in": "header",
            "required": true
          },
          {
            "name": "account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/existingCustomerAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "Update not permitted",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/accounts": {
      "get": {
        "description": "Returns all the users. This function is only allowed for users who have the permission to view other users profiles.",
        "operationId": "GetAllUserAccounts",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id for the user who is making the request",
            "name": "proelium-user-id",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userAccountResults"
            }
          },
          "401": {
            "description": "Not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a user account and invite them to the app. Only admins are allowed to perform this function",
        "operationId": "CreateUserAccount",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id for the user who is making the request",
            "name": "proelium-user-id",
            "in": "header",
            "required": true
          },
          {
            "name": "userAccount",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/userAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/postOkResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/badInputResponse"
            }
          },
          "401": {
            "description": "insufficient permissions/not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/alreadyExistsResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/accounts/{user_id}": {
      "get": {
        "description": "Returns user account",
        "operationId": "GetUserAccount",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id for the user who is making the request",
            "name": "proelium-user-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id of account to be gotten",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Optional date range. Default is last 7 days starting current day. Maximum range is 30 days at a time",
            "name": "date_range",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/dateRange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userAccountResult"
            }
          },
          "401": {
            "description": "Not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes the user with the given their ID. Only admin users are allowed to perform this action",
        "operationId": "DeleteUserAccount",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id (customer_id)",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id for the user who is making the request",
            "name": "proelium-user-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id of account to be deleted",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "Delete not permitted",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update the user account. Only admin users and the owner of the account can update their account.",
        "operationId": "UpdateUserAccount",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id (customer_id)",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id for the user who is making the request",
            "name": "proelium-user-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id of account to be updated",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "name": "user_account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/existingUserAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "Update not permitted",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/accounts/{user_id}/stats": {
      "get": {
        "description": "Returns user stats. Only admin can view all user stats, and non-admin can only view their own stats",
        "operationId": "GetUserStats",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id for the user who is making the request",
            "name": "proelium-user-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id of account to be gotten",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Optional date range. Default is last 7 days starting current day. Maximum range is 30 days at a time",
            "name": "date_range",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/dateRange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userStats"
            }
          },
          "401": {
            "description": "Not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/authchallenge": {
      "post": {
        "description": "Attempts to complete the AWS NEW_PASSWORD_REQUIRED challenge",
        "operationId": "CompleteAuthChallenge",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "name": "authChallengeCredentials",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/authChallengeCredentials"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/password": {
      "patch": {
        "description": "Used when a user wants to change their password",
        "operationId": "changePassword",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Cognito provided id token",
            "name": "idToken",
            "in": "header",
            "required": true
          },
          {
            "name": "changePasswordInput",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/changePasswordInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "Not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/recovery": {
      "get": {
        "description": "Attempts to perform a password change in the case a user forgets their password (emails a new one to them).",
        "operationId": "RequestPasswordRecovery",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "email",
            "name": "email",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Submit password recovery parameters to complete the process",
        "operationId": "CompletePasswordRecovery",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "name": "confirmRecoverPasswordInput",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/confirmRecoverPasswordInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/refresh": {
      "get": {
        "description": "Refreshes the users JWT token",
        "operationId": "refreshTokens",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "name": "Refresh-Token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/refreshTokensResponse"
            }
          },
          "401": {
            "description": "Not Allowed, most likely invalid token",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/signin": {
      "post": {
        "description": "Sign in",
        "operationId": "SignIn",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "name": "loginCredentials",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/loginCredentials"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/signInTokensResponse"
            }
          },
          "307": {
            "description": "Authentication challenge required",
            "schema": {
              "$ref": "#/definitions/authChallengeRequiredResult"
            }
          },
          "401": {
            "description": "Incorrect username or password",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/signout": {
      "get": {
        "description": "Sign out",
        "operationId": "SignOut",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Cognito provided id token",
            "name": "idToken",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "Unauthorized, most likely invalid refresh token.",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/signup": {
      "post": {
        "description": "Create new customer and first (admin) user",
        "operationId": "SignUp",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "name": "signUpData",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/signUpData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/postOkResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/badInputResponse"
            }
          },
          "401": {
            "description": "insufficient permissions/not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/alreadyExistsResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "administrationPermissions": {
      "type": "object",
      "required": [
        "canAddTeamMember"
      ],
      "properties": {
        "canAddTeamMember": {
          "type": "boolean"
        }
      }
    },
    "agencyClientsPermissions": {
      "type": "object",
      "required": [
        "isAdmin",
        "canAssignClient"
      ],
      "properties": {
        "canAssignClient": {
          "type": "boolean"
        },
        "isAdmin": {
          "type": "boolean"
        }
      }
    },
    "alreadyExistsResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Entity already exists"
        }
      }
    },
    "authChallengeCredentials": {
      "type": "object",
      "required": [
        "email",
        "sessionId",
        "newPassword"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "newPassword": {
          "type": "string"
        },
        "sessionId": {
          "type": "string"
        }
      }
    },
    "authChallengeRequiredResult": {
      "type": "object",
      "required": [
        "email",
        "sessionId",
        "challengeName"
      ],
      "properties": {
        "challengeName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "sessionId": {
          "type": "string"
        }
      }
    },
    "badInputResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Bad input"
        }
      }
    },
    "changePasswordInput": {
      "type": "object",
      "required": [
        "oldPassword",
        "newPassword",
        "accessToken"
      ],
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        },
        "oldPassword": {
          "type": "string"
        }
      }
    },
    "clientsPermissions": {
      "type": "object",
      "required": [
        "canAssignTeamMemberToClient"
      ],
      "properties": {
        "canAssignTeamMemberToClient": {
          "type": "boolean"
        }
      }
    },
    "confirmRecoverPasswordInput": {
      "type": "object",
      "required": [
        "email",
        "newPassword",
        "confirmationCode"
      ],
      "properties": {
        "confirmationCode": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },
    "customerAccount": {
      "type": "object",
      "required": [
        "profile",
        "settings"
      ],
      "properties": {
        "profile": {
          "$ref": "#/definitions/customerProfile"
        },
        "settings": {
          "$ref": "#/definitions/customerSettings"
        }
      }
    },
    "customerProfile": {
      "type": "object",
      "required": [
        "name",
        "website"
      ],
      "properties": {
        "country": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "website": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "customerSettings": {
      "type": "object",
      "required": [
        "maxEmailsPerUserPerDay",
        "maxEmailsPerProspectPerDay"
      ],
      "properties": {
        "maxEmailsPerProspectPerDay": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "maxEmailsPerUserPerDay": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        }
      }
    },
    "dateRange": {
      "type": "object",
      "required": [
        "startDate",
        "endDate"
      ],
      "properties": {
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "errorResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Internal error"
        }
      }
    },
    "existingCustomerAccount": {
      "type": "object",
      "required": [
        "profile",
        "settings"
      ],
      "properties": {
        "profile": {
          "$ref": "#/definitions/existingCustomerProfile"
        },
        "settings": {
          "$ref": "#/definitions/customerSettings"
        }
      }
    },
    "existingCustomerProfile": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        }
      }
    },
    "existingUserAccount": {
      "type": "object",
      "required": [
        "profile"
      ],
      "properties": {
        "governanceProfile": {
          "$ref": "#/definitions/governanceProfile"
        },
        "profile": {
          "$ref": "#/definitions/existingUserProfile"
        },
        "settings": {
          "$ref": "#/definitions/userNotificationSettings"
        }
      }
    },
    "existingUserProfile": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "maxLength": 50,
          "minLength": 1
        },
        "lastName": {
          "type": "string",
          "maxLength": 50,
          "minLength": 1
        },
        "nickName": {
          "type": "string",
          "maxLength": 50,
          "minLength": 1
        },
        "phone": {
          "$ref": "#/definitions/phoneNumber"
        },
        "title": {
          "type": "string",
          "maxLength": 50
        }
      }
    },
    "governanceProfile": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "administrationPermissions": {
          "$ref": "#/definitions/administrationPermissions"
        },
        "clientsPermissions": {
          "$ref": "#/definitions/clientsPermissions"
        },
        "name": {
          "type": "string",
          "maxLength": 50
        }
      }
    },
    "loginCredentials": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "notAllowedResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Not allowed"
        }
      }
    },
    "notFoundResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Not found"
        }
      }
    },
    "okResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "OK"
        }
      }
    },
    "phoneNumber": {
      "type": "object",
      "required": [
        "country",
        "code",
        "number"
      ],
      "properties": {
        "code": {
          "type": "string",
          "minLength": 1
        },
        "country": {
          "type": "string",
          "minLength": 1
        },
        "number": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "postOkResponse": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "maxLength": 36
        }
      }
    },
    "refreshTokensResponse": {
      "type": "object",
      "required": [
        "idToken",
        "accessToken"
      ],
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "idToken": {
          "type": "string"
        }
      }
    },
    "signInTokensResponse": {
      "type": "object",
      "required": [
        "idToken",
        "accessToken",
        "refreshToken"
      ],
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "idToken": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        }
      }
    },
    "signUpData": {
      "type": "object",
      "required": [
        "email",
        "firstName",
        "lastName",
        "companyName",
        "companyWebsite",
        "accountType"
      ],
      "properties": {
        "accountType": {
          "type": "string",
          "default": "agency",
          "enum": [
            "agency",
            "sales"
          ]
        },
        "companyName": {
          "type": "string"
        },
        "companyWebsite": {
          "type": "string",
          "format": "uri"
        },
        "country": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      }
    },
    "userAccount": {
      "type": "object",
      "required": [
        "profile",
        "governanceProfile"
      ],
      "properties": {
        "governanceProfile": {
          "$ref": "#/definitions/governanceProfile"
        },
        "profile": {
          "$ref": "#/definitions/userProfile"
        },
        "settings": {
          "$ref": "#/definitions/userNotificationSettings"
        }
      }
    },
    "userAccountResult": {
      "type": "object",
      "required": [
        "id",
        "userAccount"
      ],
      "properties": {
        "id": {
          "type": "string",
          "maxLength": 36
        },
        "userAccount": {
          "$ref": "#/definitions/userAccount"
        },
        "userAssignedClients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userAssignedClient"
          }
        },
        "userStats": {
          "$ref": "#/definitions/userStats"
        }
      }
    },
    "userAccountResults": {
      "type": "object",
      "required": [
        "users"
      ],
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userAccountResult"
          }
        }
      }
    },
    "userAssignedClient": {
      "type": "object",
      "required": [
        "clientId"
      ],
      "properties": {
        "clientId": {
          "type": "string",
          "maxLength": 36
        }
      }
    },
    "userNotificationSettings": {
      "type": "object",
      "required": [
        "sendDailyDigest",
        "notifyEmailsSendLimitWarning",
        "notifyEmailsBounceRateWarning"
      ],
      "properties": {
        "notifyEmailsBounceRateWarning": {
          "type": "boolean"
        },
        "notifyEmailsSendLimitWarning": {
          "type": "boolean"
        },
        "sendDailyDigest": {
          "type": "boolean"
        }
      }
    },
    "userProfile": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "email"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "maxLength": 50,
          "minLength": 1
        },
        "lastName": {
          "type": "string",
          "maxLength": 50,
          "minLength": 1
        },
        "nickName": {
          "type": "string",
          "maxLength": 50,
          "minLength": 1
        },
        "phone": {
          "$ref": "#/definitions/phoneNumber"
        },
        "title": {
          "type": "string",
          "maxLength": 50
        }
      }
    },
    "userStats": {
      "type": "object",
      "required": [
        "emailsSent",
        "emailsSentInSequence",
        "activeSequencesCount",
        "emailReplies",
        "meetingsBooked",
        "upcomingTasksCount"
      ],
      "properties": {
        "activeSequencesCount": {
          "type": "integer",
          "format": "int64"
        },
        "emailReplies": {
          "type": "integer",
          "format": "int64"
        },
        "emailsSent": {
          "type": "integer",
          "format": "int64"
        },
        "emailsSentInSequence": {
          "type": "integer",
          "format": "int64"
        },
        "meetingsBooked": {
          "type": "integer",
          "format": "int64"
        },
        "upcomingTasksCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "userStatsData": {
      "type": "object",
      "required": [
        "date",
        "stats"
      ],
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "stats": {
          "$ref": "#/definitions/userStats"
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "A microservice for managing AWS cognito user accounts",
    "title": "User Accounts Service",
    "version": "0.1.0"
  },
  "paths": {
    "/internal/v1/users/verifyJwt": {
      "get": {
        "description": "Validates a JWT Token",
        "operationId": "VerifyJwt",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "name": "token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "Not Allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/internal/v1/users/{user_id}/permissions/agencyclients": {
      "get": {
        "description": "Get users agency clients permissions",
        "operationId": "GetAgencyClientsPermissions",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/agencyClientsPermissions"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/internal/v1/users/{user_id}/stats": {
      "patch": {
        "description": "Update user stats",
        "operationId": "UpdateUserStats",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "name": "stats",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/userStatsData"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/customers/accounts/": {
      "get": {
        "description": "Returns a customer",
        "operationId": "GetCustomerAccount",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id for the user who is making the request",
            "name": "proelium-user-id",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/customerAccount"
            }
          },
          "401": {
            "description": "Not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update customer account",
        "operationId": "UpdateCustomerAccount",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id for the user who is making the request",
            "name": "proelium-user-id",
            "in": "header",
            "required": true
          },
          {
            "name": "account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/existingCustomerAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "Update not permitted",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/accounts": {
      "get": {
        "description": "Returns all the users. This function is only allowed for users who have the permission to view other users profiles.",
        "operationId": "GetAllUserAccounts",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id for the user who is making the request",
            "name": "proelium-user-id",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userAccountResults"
            }
          },
          "401": {
            "description": "Not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Create a user account and invite them to the app. Only admins are allowed to perform this function",
        "operationId": "CreateUserAccount",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id for the user who is making the request",
            "name": "proelium-user-id",
            "in": "header",
            "required": true
          },
          {
            "name": "userAccount",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/userAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/postOkResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/badInputResponse"
            }
          },
          "401": {
            "description": "insufficient permissions/not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/alreadyExistsResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/accounts/{user_id}": {
      "get": {
        "description": "Returns user account",
        "operationId": "GetUserAccount",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id for the user who is making the request",
            "name": "proelium-user-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id of account to be gotten",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Optional date range. Default is last 7 days starting current day. Maximum range is 30 days at a time",
            "name": "date_range",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/dateRange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userAccountResult"
            }
          },
          "401": {
            "description": "Not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Deletes the user with the given their ID. Only admin users are allowed to perform this action",
        "operationId": "DeleteUserAccount",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id (customer_id)",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id for the user who is making the request",
            "name": "proelium-user-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id of account to be deleted",
            "name": "user_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "Delete not permitted",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "patch": {
        "description": "Update the user account. Only admin users and the owner of the account can update their account.",
        "operationId": "UpdateUserAccount",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id (customer_id)",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id for the user who is making the request",
            "name": "proelium-user-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id of account to be updated",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "name": "user_account",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/existingUserAccount"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "Update not permitted",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/accounts/{user_id}/stats": {
      "get": {
        "description": "Returns user stats. Only admin can view all user stats, and non-admin can only view their own stats",
        "operationId": "GetUserStats",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium customer id",
            "name": "proelium-customer-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id for the user who is making the request",
            "name": "proelium-user-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Proelium user id of account to be gotten",
            "name": "user_id",
            "in": "path",
            "required": true
          },
          {
            "description": "Optional date range. Default is last 7 days starting current day. Maximum range is 30 days at a time",
            "name": "date_range",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/dateRange"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/userStats"
            }
          },
          "401": {
            "description": "Not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/authchallenge": {
      "post": {
        "description": "Attempts to complete the AWS NEW_PASSWORD_REQUIRED challenge",
        "operationId": "CompleteAuthChallenge",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "name": "authChallengeCredentials",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/authChallengeCredentials"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/password": {
      "patch": {
        "description": "Used when a user wants to change their password",
        "operationId": "changePassword",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Cognito provided id token",
            "name": "idToken",
            "in": "header",
            "required": true
          },
          {
            "name": "changePasswordInput",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/changePasswordInput"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "Not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/recovery": {
      "get": {
        "description": "Attempts to perform a password change in the case a user forgets their password (emails a new one to them).",
        "operationId": "RequestPasswordRecovery",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "format": "email",
            "name": "email",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "post": {
        "description": "Submit password recovery parameters to complete the process",
        "operationId": "CompletePasswordRecovery",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "name": "confirmRecoverPasswordInput",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/confirmRecoverPasswordInput"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/refresh": {
      "get": {
        "description": "Refreshes the users JWT token",
        "operationId": "refreshTokens",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "name": "Refresh-Token",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/refreshTokensResponse"
            }
          },
          "401": {
            "description": "Not Allowed, most likely invalid token",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/signin": {
      "post": {
        "description": "Sign in",
        "operationId": "SignIn",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "name": "loginCredentials",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/loginCredentials"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/signInTokensResponse"
            }
          },
          "307": {
            "description": "Authentication challenge required",
            "schema": {
              "$ref": "#/definitions/authChallengeRequiredResult"
            }
          },
          "401": {
            "description": "Incorrect username or password",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "$ref": "#/definitions/notFoundResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/signout": {
      "get": {
        "description": "Sign out",
        "operationId": "SignOut",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "Cognito provided id token",
            "name": "idToken",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "Unauthorized, most likely invalid refresh token.",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/signup": {
      "post": {
        "description": "Create new customer and first (admin) user",
        "operationId": "SignUp",
        "parameters": [
          {
            "type": "string",
            "format": "uuid",
            "description": "Request id",
            "name": "X-Request-ID",
            "in": "header",
            "required": true
          },
          {
            "name": "signUpData",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/signUpData"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/postOkResponse"
            }
          },
          "400": {
            "description": "Bad request",
            "schema": {
              "$ref": "#/definitions/badInputResponse"
            }
          },
          "401": {
            "description": "insufficient permissions/not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/alreadyExistsResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "administrationPermissions": {
      "type": "object",
      "required": [
        "canAddTeamMember"
      ],
      "properties": {
        "canAddTeamMember": {
          "type": "boolean"
        }
      }
    },
    "agencyClientsPermissions": {
      "type": "object",
      "required": [
        "isAdmin",
        "canAssignClient"
      ],
      "properties": {
        "canAssignClient": {
          "type": "boolean"
        },
        "isAdmin": {
          "type": "boolean"
        }
      }
    },
    "alreadyExistsResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Entity already exists"
        }
      }
    },
    "authChallengeCredentials": {
      "type": "object",
      "required": [
        "email",
        "sessionId",
        "newPassword"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "newPassword": {
          "type": "string"
        },
        "sessionId": {
          "type": "string"
        }
      }
    },
    "authChallengeRequiredResult": {
      "type": "object",
      "required": [
        "email",
        "sessionId",
        "challengeName"
      ],
      "properties": {
        "challengeName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "sessionId": {
          "type": "string"
        }
      }
    },
    "badInputResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Bad input"
        }
      }
    },
    "changePasswordInput": {
      "type": "object",
      "required": [
        "oldPassword",
        "newPassword",
        "accessToken"
      ],
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "newPassword": {
          "type": "string"
        },
        "oldPassword": {
          "type": "string"
        }
      }
    },
    "clientsPermissions": {
      "type": "object",
      "required": [
        "canAssignTeamMemberToClient"
      ],
      "properties": {
        "canAssignTeamMemberToClient": {
          "type": "boolean"
        }
      }
    },
    "confirmRecoverPasswordInput": {
      "type": "object",
      "required": [
        "email",
        "newPassword",
        "confirmationCode"
      ],
      "properties": {
        "confirmationCode": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "newPassword": {
          "type": "string"
        }
      }
    },
    "customerAccount": {
      "type": "object",
      "required": [
        "profile",
        "settings"
      ],
      "properties": {
        "profile": {
          "$ref": "#/definitions/customerProfile"
        },
        "settings": {
          "$ref": "#/definitions/customerSettings"
        }
      }
    },
    "customerProfile": {
      "type": "object",
      "required": [
        "name",
        "website"
      ],
      "properties": {
        "country": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "website": {
          "type": "string",
          "format": "uri"
        }
      }
    },
    "customerSettings": {
      "type": "object",
      "required": [
        "maxEmailsPerUserPerDay",
        "maxEmailsPerProspectPerDay"
      ],
      "properties": {
        "maxEmailsPerProspectPerDay": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "maxEmailsPerUserPerDay": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        }
      }
    },
    "dateRange": {
      "type": "object",
      "required": [
        "startDate",
        "endDate"
      ],
      "properties": {
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "errorResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Internal error"
        }
      }
    },
    "existingCustomerAccount": {
      "type": "object",
      "required": [
        "profile",
        "settings"
      ],
      "properties": {
        "profile": {
          "$ref": "#/definitions/existingCustomerProfile"
        },
        "settings": {
          "$ref": "#/definitions/customerSettings"
        }
      }
    },
    "existingCustomerProfile": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        }
      }
    },
    "existingUserAccount": {
      "type": "object",
      "required": [
        "profile"
      ],
      "properties": {
        "governanceProfile": {
          "$ref": "#/definitions/governanceProfile"
        },
        "profile": {
          "$ref": "#/definitions/existingUserProfile"
        },
        "settings": {
          "$ref": "#/definitions/userNotificationSettings"
        }
      }
    },
    "existingUserProfile": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "maxLength": 50,
          "minLength": 1
        },
        "lastName": {
          "type": "string",
          "maxLength": 50,
          "minLength": 1
        },
        "nickName": {
          "type": "string",
          "maxLength": 50,
          "minLength": 1
        },
        "phone": {
          "$ref": "#/definitions/phoneNumber"
        },
        "title": {
          "type": "string",
          "maxLength": 50
        }
      }
    },
    "governanceProfile": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "administrationPermissions": {
          "$ref": "#/definitions/administrationPermissions"
        },
        "clientsPermissions": {
          "$ref": "#/definitions/clientsPermissions"
        },
        "name": {
          "type": "string",
          "maxLength": 50
        }
      }
    },
    "loginCredentials": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "notAllowedResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Not allowed"
        }
      }
    },
    "notFoundResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Not found"
        }
      }
    },
    "okResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "OK"
        }
      }
    },
    "phoneNumber": {
      "type": "object",
      "required": [
        "country",
        "code",
        "number"
      ],
      "properties": {
        "code": {
          "type": "string",
          "minLength": 1
        },
        "country": {
          "type": "string",
          "minLength": 1
        },
        "number": {
          "type": "string",
          "minLength": 1
        }
      }
    },
    "postOkResponse": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "maxLength": 36
        }
      }
    },
    "refreshTokensResponse": {
      "type": "object",
      "required": [
        "idToken",
        "accessToken"
      ],
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "idToken": {
          "type": "string"
        }
      }
    },
    "signInTokensResponse": {
      "type": "object",
      "required": [
        "idToken",
        "accessToken",
        "refreshToken"
      ],
      "properties": {
        "accessToken": {
          "type": "string"
        },
        "idToken": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        }
      }
    },
    "signUpData": {
      "type": "object",
      "required": [
        "email",
        "firstName",
        "lastName",
        "companyName",
        "companyWebsite",
        "accountType"
      ],
      "properties": {
        "accountType": {
          "type": "string",
          "default": "agency",
          "enum": [
            "agency",
            "sales"
          ]
        },
        "companyName": {
          "type": "string"
        },
        "companyWebsite": {
          "type": "string",
          "format": "uri"
        },
        "country": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "format": "email"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      }
    },
    "userAccount": {
      "type": "object",
      "required": [
        "profile",
        "governanceProfile"
      ],
      "properties": {
        "governanceProfile": {
          "$ref": "#/definitions/governanceProfile"
        },
        "profile": {
          "$ref": "#/definitions/userProfile"
        },
        "settings": {
          "$ref": "#/definitions/userNotificationSettings"
        }
      }
    },
    "userAccountResult": {
      "type": "object",
      "required": [
        "id",
        "userAccount"
      ],
      "properties": {
        "id": {
          "type": "string",
          "maxLength": 36
        },
        "userAccount": {
          "$ref": "#/definitions/userAccount"
        },
        "userAssignedClients": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userAssignedClient"
          }
        },
        "userStats": {
          "$ref": "#/definitions/userStats"
        }
      }
    },
    "userAccountResults": {
      "type": "object",
      "required": [
        "users"
      ],
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/userAccountResult"
          }
        }
      }
    },
    "userAssignedClient": {
      "type": "object",
      "required": [
        "clientId"
      ],
      "properties": {
        "clientId": {
          "type": "string",
          "maxLength": 36
        }
      }
    },
    "userNotificationSettings": {
      "type": "object",
      "required": [
        "sendDailyDigest",
        "notifyEmailsSendLimitWarning",
        "notifyEmailsBounceRateWarning"
      ],
      "properties": {
        "notifyEmailsBounceRateWarning": {
          "type": "boolean"
        },
        "notifyEmailsSendLimitWarning": {
          "type": "boolean"
        },
        "sendDailyDigest": {
          "type": "boolean"
        }
      }
    },
    "userProfile": {
      "type": "object",
      "required": [
        "firstName",
        "lastName",
        "email"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "firstName": {
          "type": "string",
          "maxLength": 50,
          "minLength": 1
        },
        "lastName": {
          "type": "string",
          "maxLength": 50,
          "minLength": 1
        },
        "nickName": {
          "type": "string",
          "maxLength": 50,
          "minLength": 1
        },
        "phone": {
          "$ref": "#/definitions/phoneNumber"
        },
        "title": {
          "type": "string",
          "maxLength": 50
        }
      }
    },
    "userStats": {
      "type": "object",
      "required": [
        "emailsSent",
        "emailsSentInSequence",
        "activeSequencesCount",
        "emailReplies",
        "meetingsBooked",
        "upcomingTasksCount"
      ],
      "properties": {
        "activeSequencesCount": {
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "emailReplies": {
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "emailsSent": {
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "emailsSentInSequence": {
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "meetingsBooked": {
          "type": "integer",
          "format": "int64",
          "minimum": 0
        },
        "upcomingTasksCount": {
          "type": "integer",
          "format": "int64",
          "minimum": 0
        }
      }
    },
    "userStatsData": {
      "type": "object",
      "required": [
        "date",
        "stats"
      ],
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "stats": {
          "$ref": "#/definitions/userStats"
        }
      }
    }
  }
}`))
}
