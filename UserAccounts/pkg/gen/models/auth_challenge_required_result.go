// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthChallengeRequiredResult auth challenge required result
// swagger:model authChallengeRequiredResult
type AuthChallengeRequiredResult struct {

	// challenge name
	// Required: true
	ChallengeName *string `json:"challengeName"`

	// email
	// Required: true
	Email *string `json:"email"`

	// session Id
	// Required: true
	SessionID *string `json:"sessionId"`
}

// Validate validates this auth challenge required result
func (m *AuthChallengeRequiredResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateChallengeName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSessionID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthChallengeRequiredResult) validateChallengeName(formats strfmt.Registry) error {

	if err := validate.Required("challengeName", "body", m.ChallengeName); err != nil {
		return err
	}

	return nil
}

func (m *AuthChallengeRequiredResult) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *AuthChallengeRequiredResult) validateSessionID(formats strfmt.Registry) error {

	if err := validate.Required("sessionId", "body", m.SessionID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthChallengeRequiredResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthChallengeRequiredResult) UnmarshalBinary(b []byte) error {
	var res AuthChallengeRequiredResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
