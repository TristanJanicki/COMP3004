// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserProfile user profile
// swagger:model userProfile
type UserProfile struct {

	// account type
	// Required: true
	// Enum: [premium freemium]
	AccountType *string `json:"accountType"`

	// email
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// name
	// Required: true
	// Max Length: 50
	// Min Length: 1
	Name *string `json:"name"`

	// nick name
	// Max Length: 50
	// Min Length: 1
	NickName string `json:"nickName,omitempty"`

	// phone
	Phone *PhoneNumber `json:"phone,omitempty"`

	// title
	// Max Length: 50
	Title string `json:"title,omitempty"`
}

// Validate validates this user profile
func (m *UserProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNickName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userProfileTypeAccountTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["premium","freemium"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userProfileTypeAccountTypePropEnum = append(userProfileTypeAccountTypePropEnum, v)
	}
}

const (

	// UserProfileAccountTypePremium captures enum value "premium"
	UserProfileAccountTypePremium string = "premium"

	// UserProfileAccountTypeFreemium captures enum value "freemium"
	UserProfileAccountTypeFreemium string = "freemium"
)

// prop value enum
func (m *UserProfile) validateAccountTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, userProfileTypeAccountTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UserProfile) validateAccountType(formats strfmt.Registry) error {

	if err := validate.Required("accountType", "body", m.AccountType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccountTypeEnum("accountType", "body", *m.AccountType); err != nil {
		return err
	}

	return nil
}

func (m *UserProfile) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserProfile) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 50); err != nil {
		return err
	}

	return nil
}

func (m *UserProfile) validateNickName(formats strfmt.Registry) error {

	if swag.IsZero(m.NickName) { // not required
		return nil
	}

	if err := validate.MinLength("nickName", "body", string(m.NickName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("nickName", "body", string(m.NickName), 50); err != nil {
		return err
	}

	return nil
}

func (m *UserProfile) validatePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.Phone) { // not required
		return nil
	}

	if m.Phone != nil {
		if err := m.Phone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phone")
			}
			return err
		}
	}

	return nil
}

func (m *UserProfile) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MaxLength("title", "body", string(m.Title), 50); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserProfile) UnmarshalBinary(b []byte) error {
	var res UserProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
