// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SignUpData sign up data
// swagger:model signUpData
type SignUpData struct {

	// account type
	// Required: true
	// Enum: [premium freemium]
	AccountType *string `json:"accountType"`

	// email
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this sign up data
func (m *SignUpData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var signUpDataTypeAccountTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["premium","freemium"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		signUpDataTypeAccountTypePropEnum = append(signUpDataTypeAccountTypePropEnum, v)
	}
}

const (

	// SignUpDataAccountTypePremium captures enum value "premium"
	SignUpDataAccountTypePremium string = "premium"

	// SignUpDataAccountTypeFreemium captures enum value "freemium"
	SignUpDataAccountTypeFreemium string = "freemium"
)

// prop value enum
func (m *SignUpData) validateAccountTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, signUpDataTypeAccountTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SignUpData) validateAccountType(formats strfmt.Registry) error {

	if err := validate.Required("accountType", "body", m.AccountType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAccountTypeEnum("accountType", "body", *m.AccountType); err != nil {
		return err
	}

	return nil
}

func (m *SignUpData) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *SignUpData) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SignUpData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SignUpData) UnmarshalBinary(b []byte) error {
	var res SignUpData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
