// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExistingUserProfile existing user profile
// swagger:model existingUserProfile
type ExistingUserProfile struct {

	// first name
	// Max Length: 50
	// Min Length: 1
	FirstName string `json:"firstName,omitempty"`

	// last name
	// Max Length: 50
	// Min Length: 1
	LastName string `json:"lastName,omitempty"`

	// nick name
	// Max Length: 50
	// Min Length: 1
	NickName string `json:"nickName,omitempty"`

	// phone
	Phone *PhoneNumber `json:"phone,omitempty"`

	// title
	// Max Length: 50
	Title string `json:"title,omitempty"`
}

// Validate validates this existing user profile
func (m *ExistingUserProfile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNickName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExistingUserProfile) validateFirstName(formats strfmt.Registry) error {

	if swag.IsZero(m.FirstName) { // not required
		return nil
	}

	if err := validate.MinLength("firstName", "body", string(m.FirstName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("firstName", "body", string(m.FirstName), 50); err != nil {
		return err
	}

	return nil
}

func (m *ExistingUserProfile) validateLastName(formats strfmt.Registry) error {

	if swag.IsZero(m.LastName) { // not required
		return nil
	}

	if err := validate.MinLength("lastName", "body", string(m.LastName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("lastName", "body", string(m.LastName), 50); err != nil {
		return err
	}

	return nil
}

func (m *ExistingUserProfile) validateNickName(formats strfmt.Registry) error {

	if swag.IsZero(m.NickName) { // not required
		return nil
	}

	if err := validate.MinLength("nickName", "body", string(m.NickName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("nickName", "body", string(m.NickName), 50); err != nil {
		return err
	}

	return nil
}

func (m *ExistingUserProfile) validatePhone(formats strfmt.Registry) error {

	if swag.IsZero(m.Phone) { // not required
		return nil
	}

	if m.Phone != nil {
		if err := m.Phone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("phone")
			}
			return err
		}
	}

	return nil
}

func (m *ExistingUserProfile) validateTitle(formats strfmt.Registry) error {

	if swag.IsZero(m.Title) { // not required
		return nil
	}

	if err := validate.MaxLength("title", "body", string(m.Title), 50); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExistingUserProfile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExistingUserProfile) UnmarshalBinary(b []byte) error {
	var res ExistingUserProfile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
