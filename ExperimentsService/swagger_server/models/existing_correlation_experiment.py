# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ExistingCorrelationExperiment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, experiment_id: str=None, asset_1: str=None, asset_2: str=None, correlation: float=None, data: List[float]=None, type: str=None):  # noqa: E501
        """ExistingCorrelationExperiment - a model defined in Swagger

        :param experiment_id: The experiment_id of this ExistingCorrelationExperiment.  # noqa: E501
        :type experiment_id: str
        :param asset_1: The asset_1 of this ExistingCorrelationExperiment.  # noqa: E501
        :type asset_1: str
        :param asset_2: The asset_2 of this ExistingCorrelationExperiment.  # noqa: E501
        :type asset_2: str
        :param correlation: The correlation of this ExistingCorrelationExperiment.  # noqa: E501
        :type correlation: float
        :param data: The data of this ExistingCorrelationExperiment.  # noqa: E501
        :type data: List[float]
        :param type: The type of this ExistingCorrelationExperiment.  # noqa: E501
        :type type: str
        """
        self.swagger_types = {
            'experiment_id': str,
            'asset_1': str,
            'asset_2': str,
            'correlation': float,
            'data': List[float],
            'type': str
        }

        self.attribute_map = {
            'experiment_id': 'experiment_id',
            'asset_1': 'asset_1',
            'asset_2': 'asset_2',
            'correlation': 'correlation',
            'data': 'data',
            'type': 'type'
        }

        self._experiment_id = experiment_id
        self._asset_1 = asset_1
        self._asset_2 = asset_2
        self._correlation = correlation
        self._data = data
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'ExistingCorrelationExperiment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The existingCorrelationExperiment of this ExistingCorrelationExperiment.  # noqa: E501
        :rtype: ExistingCorrelationExperiment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def experiment_id(self) -> str:
        """Gets the experiment_id of this ExistingCorrelationExperiment.


        :return: The experiment_id of this ExistingCorrelationExperiment.
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id: str):
        """Sets the experiment_id of this ExistingCorrelationExperiment.


        :param experiment_id: The experiment_id of this ExistingCorrelationExperiment.
        :type experiment_id: str
        """
        if experiment_id is None:
            raise ValueError("Invalid value for `experiment_id`, must not be `None`")  # noqa: E501

        self._experiment_id = experiment_id

    @property
    def asset_1(self) -> str:
        """Gets the asset_1 of this ExistingCorrelationExperiment.


        :return: The asset_1 of this ExistingCorrelationExperiment.
        :rtype: str
        """
        return self._asset_1

    @asset_1.setter
    def asset_1(self, asset_1: str):
        """Sets the asset_1 of this ExistingCorrelationExperiment.


        :param asset_1: The asset_1 of this ExistingCorrelationExperiment.
        :type asset_1: str
        """
        if asset_1 is None:
            raise ValueError("Invalid value for `asset_1`, must not be `None`")  # noqa: E501

        self._asset_1 = asset_1

    @property
    def asset_2(self) -> str:
        """Gets the asset_2 of this ExistingCorrelationExperiment.


        :return: The asset_2 of this ExistingCorrelationExperiment.
        :rtype: str
        """
        return self._asset_2

    @asset_2.setter
    def asset_2(self, asset_2: str):
        """Sets the asset_2 of this ExistingCorrelationExperiment.


        :param asset_2: The asset_2 of this ExistingCorrelationExperiment.
        :type asset_2: str
        """
        if asset_2 is None:
            raise ValueError("Invalid value for `asset_2`, must not be `None`")  # noqa: E501

        self._asset_2 = asset_2

    @property
    def correlation(self) -> float:
        """Gets the correlation of this ExistingCorrelationExperiment.


        :return: The correlation of this ExistingCorrelationExperiment.
        :rtype: float
        """
        return self._correlation

    @correlation.setter
    def correlation(self, correlation: float):
        """Sets the correlation of this ExistingCorrelationExperiment.


        :param correlation: The correlation of this ExistingCorrelationExperiment.
        :type correlation: float
        """
        if correlation is None:
            raise ValueError("Invalid value for `correlation`, must not be `None`")  # noqa: E501

        self._correlation = correlation

    @property
    def data(self) -> List[float]:
        """Gets the data of this ExistingCorrelationExperiment.


        :return: The data of this ExistingCorrelationExperiment.
        :rtype: List[float]
        """
        return self._data

    @data.setter
    def data(self, data: List[float]):
        """Sets the data of this ExistingCorrelationExperiment.


        :param data: The data of this ExistingCorrelationExperiment.
        :type data: List[float]
        """

        self._data = data

    @property
    def type(self) -> str:
        """Gets the type of this ExistingCorrelationExperiment.


        :return: The type of this ExistingCorrelationExperiment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ExistingCorrelationExperiment.


        :param type: The type of this ExistingCorrelationExperiment.
        :type type: str
        """
        allowed_values = ["stock", "forex"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
