# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class NewExperimentCorrelation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, indicator: str=None, ticker: str=None):  # noqa: E501
        """NewExperimentCorrelation - a model defined in Swagger

        :param indicator: The indicator of this NewExperimentCorrelation.  # noqa: E501
        :type indicator: str
        :param ticker: The ticker of this NewExperimentCorrelation.  # noqa: E501
        :type ticker: str
        """
        self.swagger_types = {
            'indicator': str,
            'ticker': str
        }

        self.attribute_map = {
            'indicator': 'indicator',
            'ticker': 'ticker'
        }

        self._indicator = indicator
        self._ticker = ticker

    @classmethod
    def from_dict(cls, dikt) -> 'NewExperimentCorrelation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The newExperimentCorrelation of this NewExperimentCorrelation.  # noqa: E501
        :rtype: NewExperimentCorrelation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def indicator(self) -> str:
        """Gets the indicator of this NewExperimentCorrelation.


        :return: The indicator of this NewExperimentCorrelation.
        :rtype: str
        """
        return self._indicator

    @indicator.setter
    def indicator(self, indicator: str):
        """Sets the indicator of this NewExperimentCorrelation.


        :param indicator: The indicator of this NewExperimentCorrelation.
        :type indicator: str
        """
        if indicator is None:
            raise ValueError("Invalid value for `indicator`, must not be `None`")  # noqa: E501

        self._indicator = indicator

    @property
    def ticker(self) -> str:
        """Gets the ticker of this NewExperimentCorrelation.


        :return: The ticker of this NewExperimentCorrelation.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker: str):
        """Sets the ticker of this NewExperimentCorrelation.


        :param ticker: The ticker of this NewExperimentCorrelation.
        :type ticker: str
        """
        if ticker is None:
            raise ValueError("Invalid value for `ticker`, must not be `None`")  # noqa: E501

        self._ticker = ticker
