# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ExistingThresholdExperiment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, experiment_id: str=None, indicator: str=None, ticker: str=None, threshold: str=None):  # noqa: E501
        """ExistingThresholdExperiment - a model defined in Swagger

        :param experiment_id: The experiment_id of this ExistingThresholdExperiment.  # noqa: E501
        :type experiment_id: str
        :param indicator: The indicator of this ExistingThresholdExperiment.  # noqa: E501
        :type indicator: str
        :param ticker: The ticker of this ExistingThresholdExperiment.  # noqa: E501
        :type ticker: str
        :param threshold: The threshold of this ExistingThresholdExperiment.  # noqa: E501
        :type threshold: str
        """
        self.swagger_types = {
            'experiment_id': str,
            'indicator': str,
            'ticker': str,
            'threshold': str
        }

        self.attribute_map = {
            'experiment_id': 'experiment_id',
            'indicator': 'indicator',
            'ticker': 'ticker',
            'threshold': 'threshold'
        }

        self._experiment_id = experiment_id
        self._indicator = indicator
        self._ticker = ticker
        self._threshold = threshold

    @classmethod
    def from_dict(cls, dikt) -> 'ExistingThresholdExperiment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The existingThresholdExperiment of this ExistingThresholdExperiment.  # noqa: E501
        :rtype: ExistingThresholdExperiment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def experiment_id(self) -> str:
        """Gets the experiment_id of this ExistingThresholdExperiment.


        :return: The experiment_id of this ExistingThresholdExperiment.
        :rtype: str
        """
        return self._experiment_id

    @experiment_id.setter
    def experiment_id(self, experiment_id: str):
        """Sets the experiment_id of this ExistingThresholdExperiment.


        :param experiment_id: The experiment_id of this ExistingThresholdExperiment.
        :type experiment_id: str
        """

        self._experiment_id = experiment_id

    @property
    def indicator(self) -> str:
        """Gets the indicator of this ExistingThresholdExperiment.


        :return: The indicator of this ExistingThresholdExperiment.
        :rtype: str
        """
        return self._indicator

    @indicator.setter
    def indicator(self, indicator: str):
        """Sets the indicator of this ExistingThresholdExperiment.


        :param indicator: The indicator of this ExistingThresholdExperiment.
        :type indicator: str
        """

        self._indicator = indicator

    @property
    def ticker(self) -> str:
        """Gets the ticker of this ExistingThresholdExperiment.


        :return: The ticker of this ExistingThresholdExperiment.
        :rtype: str
        """
        return self._ticker

    @ticker.setter
    def ticker(self, ticker: str):
        """Sets the ticker of this ExistingThresholdExperiment.


        :param ticker: The ticker of this ExistingThresholdExperiment.
        :type ticker: str
        """

        self._ticker = ticker

    @property
    def threshold(self) -> str:
        """Gets the threshold of this ExistingThresholdExperiment.


        :return: The threshold of this ExistingThresholdExperiment.
        :rtype: str
        """
        return self._threshold

    @threshold.setter
    def threshold(self, threshold: str):
        """Sets the threshold of this ExistingThresholdExperiment.


        :param threshold: The threshold of this ExistingThresholdExperiment.
        :type threshold: str
        """

        self._threshold = threshold
