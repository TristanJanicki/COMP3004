---
swagger: "2.0"
info:
  description: "A microservice for managing a users experiments"
  version: "0.1.0"
  title: "Experiments Service"
schemes:
- "http"
consumes:
- "application/json"
produces:
- "application/json"
paths:
  /v1/experiments:
    get:
      description: "Get all experiments associated/owned by a user"
      operationId: "experiments_get_all"
      parameters:
      - name: "X_Request_ID"
        in: "header"
        description: "Request id"
        required: true
        type: "string"
        format: "uuid"
      - name: "idToken"
        in: "header"
        description: "access token obtained from AWS Cognito"
        required: true
        type: "string"
      - name: "user_id"
        in: "header"
        description: "the users ID to associate the experiment with"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/getExperimentResult"
        "401":
          description: "insufficient permissions/not allowed"
          schema:
            $ref: "#/definitions/notAllowedResponse"
        "409":
          description: "Already exists"
          schema:
            $ref: "#/definitions/alreadyExistsResponse"
        "500":
          description: "Internal error"
          schema:
            $ref: "#/definitions/errorResponse"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    post:
      description: "Add a new experiment to a users account"
      operationId: "experiments_create"
      parameters:
      - name: "X_Request_ID"
        in: "header"
        description: "Request id"
        required: true
        type: "string"
        format: "uuid"
      - name: "idToken"
        in: "header"
        description: "access token obtained from AWS Cognito"
        required: true
        type: "string"
      - name: "user_id"
        in: "header"
        description: "the users ID to associate the experiment with"
        required: true
        type: "string"
      - in: "body"
        name: "experiment"
        required: false
        schema:
          $ref: "#/definitions/newExperimentPost"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/okResponse"
        "401":
          description: "insufficient permissions/not allowed"
          schema:
            $ref: "#/definitions/notAllowedResponse"
        "409":
          description: "Already exists"
          schema:
            $ref: "#/definitions/alreadyExistsResponse"
        "500":
          description: "Internal error"
          schema:
            $ref: "#/definitions/errorResponse"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    put:
      description: "Update a experiment"
      operationId: "experiments_update"
      parameters:
      - name: "X_Request_ID"
        in: "header"
        description: "Request id"
        required: true
        type: "string"
        format: "uuid"
      - name: "idToken"
        in: "header"
        description: "access token obtained from AWS Cognito"
        required: true
        type: "string"
      - name: "user_id"
        in: "header"
        description: "the users ID to associate the experiment with"
        required: true
        type: "string"
      - in: "body"
        name: "experiment"
        required: false
        schema:
          $ref: "#/definitions/existingExperimentPost"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/okResponse"
        "401":
          description: "insufficient permissions/not allowed"
          schema:
            $ref: "#/definitions/notAllowedResponse"
        "409":
          description: "Already exists"
          schema:
            $ref: "#/definitions/alreadyExistsResponse"
        "500":
          description: "Internal error"
          schema:
            $ref: "#/definitions/errorResponse"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
    delete:
      description: "Delete a experiment"
      operationId: "experiments_delete"
      parameters:
      - name: "X_Request_ID"
        in: "header"
        description: "Request id"
        required: true
        type: "string"
        format: "uuid"
      - name: "idToken"
        in: "header"
        description: "access token obtained from AWS Cognito"
        required: true
        type: "string"
      - name: "experimentID"
        in: "header"
        description: "The database ID of the experiment"
        required: true
        type: "string"
      - name: "user_id"
        in: "header"
        description: "the users ID to associate the experiment with"
        required: true
        type: "string"
      responses:
        "200":
          description: "OK"
          schema:
            $ref: "#/definitions/okResponse"
        "401":
          description: "insufficient permissions/not allowed"
          schema:
            $ref: "#/definitions/notAllowedResponse"
        "409":
          description: "Already exists"
          schema:
            $ref: "#/definitions/alreadyExistsResponse"
        "500":
          description: "Internal error"
          schema:
            $ref: "#/definitions/errorResponse"
      x-swagger-router-controller: "swagger_server.controllers.default_controller"
definitions:
  newExperimentPost:
    required:
    - "experiments"
    properties:
      experiments:
        type: "array"
        items:
          type: "object"
          allOf:
          - $ref: "#/definitions/existingExperimentThreshold"
          - $ref: "#/definitions/existingExperimentCorrelation"
  newExperimentThreshold:
    type: "object"
    required:
    - "indicator"
    - "threshold"
    - "ticker"
    - "userID"
    properties:
      userID:
        type: "string"
      indicator:
        type: "string"
      threshold:
        type: "integer"
      ticker:
        type: "string"
  newExperimentCorrelation:
    type: "object"
    required:
    - "correlation"
    - "indicator"
    - "ticker"
    - "user_id"
    properties:
      user_id:
        type: "string"
      indicator:
        type: "string"
      correlation:
        type: "integer"
      ticker:
        type: "string"
  existingExperimentPost:
    required:
    - "experiments"
    properties:
      experiments:
        type: "array"
        items:
          type: "object"
          allOf:
          - $ref: "#/definitions/existingExperimentThreshold"
          - $ref: "#/definitions/existingExperimentCorrelation"
  existingExperimentThreshold:
    type: "object"
    properties:
      experiment_id:
        type: "string"
      userID:
        type: "string"
      indicator:
        type: "string"
      threshold:
        type: "string"
      ticker:
        type: "string"
  existingExperimentCorrelation:
    type: "object"
    properties:
      experiment_id:
        type: "string"
      userID:
        type: "string"
      indicator:
        type: "string"
      correlation:
        type: "string"
      ticker:
        type: "string"
  getExperimentResult:
    required:
    - "experiments"
    properties:
      experiments:
        type: "array"
        items:
          type: "object"
          allOf:
          - $ref: "#/definitions/existingExperimentThreshold"
          - $ref: "#/definitions/existingExperimentCorrelation"
    example:
      experiments:
      - ""
      - ""
  errorResponse:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        default: "Internal error"
  notFoundResponse:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        default: "Not found"
  notAllowedResponse:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        default: "Not allowed"
  alreadyExistsResponse:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        default: "Entity already exists"
  badInputResponse:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        default: "Bad input"
  okResponse:
    type: "object"
    required:
    - "message"
    properties:
      message:
        type: "string"
        default: "OK"
    example:
      message: "OK"
  postOkResponse:
    type: "object"
    required:
    - "id"
    properties:
      id:
        type: "string"
        maxLength: 36
