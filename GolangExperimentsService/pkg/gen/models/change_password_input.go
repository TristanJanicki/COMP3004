// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChangePasswordInput change password input
// swagger:model changePasswordInput
type ChangePasswordInput struct {

	// access token
	// Required: true
	AccessToken *string `json:"accessToken"`

	// new password
	// Required: true
	NewPassword *string `json:"newPassword"`

	// old password
	// Required: true
	OldPassword *string `json:"oldPassword"`
}

// Validate validates this change password input
func (m *ChangePasswordInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNewPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOldPassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChangePasswordInput) validateAccessToken(formats strfmt.Registry) error {

	if err := validate.Required("accessToken", "body", m.AccessToken); err != nil {
		return err
	}

	return nil
}

func (m *ChangePasswordInput) validateNewPassword(formats strfmt.Registry) error {

	if err := validate.Required("newPassword", "body", m.NewPassword); err != nil {
		return err
	}

	return nil
}

func (m *ChangePasswordInput) validateOldPassword(formats strfmt.Registry) error {

	if err := validate.Required("oldPassword", "body", m.OldPassword); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChangePasswordInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChangePasswordInput) UnmarshalBinary(b []byte) error {
	var res ChangePasswordInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
