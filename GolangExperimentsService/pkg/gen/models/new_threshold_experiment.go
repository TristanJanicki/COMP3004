// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewThresholdExperiment new threshold experiment
// swagger:model newThresholdExperiment
type NewThresholdExperiment struct {

	// indicator
	// Required: true
	Indicator *string `json:"indicator"`

	// threshold
	// Required: true
	Threshold *int64 `json:"threshold"`

	// ticker
	// Required: true
	Ticker *string `json:"ticker"`
}

// Validate validates this new threshold experiment
func (m *NewThresholdExperiment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIndicator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTicker(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewThresholdExperiment) validateIndicator(formats strfmt.Registry) error {

	if err := validate.Required("indicator", "body", m.Indicator); err != nil {
		return err
	}

	return nil
}

func (m *NewThresholdExperiment) validateThreshold(formats strfmt.Registry) error {

	if err := validate.Required("threshold", "body", m.Threshold); err != nil {
		return err
	}

	return nil
}

func (m *NewThresholdExperiment) validateTicker(formats strfmt.Registry) error {

	if err := validate.Required("ticker", "body", m.Ticker); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewThresholdExperiment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewThresholdExperiment) UnmarshalBinary(b []byte) error {
	var res NewThresholdExperiment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
