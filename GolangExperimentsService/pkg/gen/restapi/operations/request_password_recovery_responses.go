// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/COMP3004/UserAccounts/pkg/gen/models"
)

// RequestPasswordRecoveryOKCode is the HTTP code returned for type RequestPasswordRecoveryOK
const RequestPasswordRecoveryOKCode int = 200

/*RequestPasswordRecoveryOK OK

swagger:response requestPasswordRecoveryOK
*/
type RequestPasswordRecoveryOK struct {

	/*
	  In: Body
	*/
	Payload *models.OkResponse `json:"body,omitempty"`
}

// NewRequestPasswordRecoveryOK creates RequestPasswordRecoveryOK with default headers values
func NewRequestPasswordRecoveryOK() *RequestPasswordRecoveryOK {

	return &RequestPasswordRecoveryOK{}
}

// WithPayload adds the payload to the request password recovery o k response
func (o *RequestPasswordRecoveryOK) WithPayload(payload *models.OkResponse) *RequestPasswordRecoveryOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request password recovery o k response
func (o *RequestPasswordRecoveryOK) SetPayload(payload *models.OkResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestPasswordRecoveryOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestPasswordRecoveryNotFoundCode is the HTTP code returned for type RequestPasswordRecoveryNotFound
const RequestPasswordRecoveryNotFoundCode int = 404

/*RequestPasswordRecoveryNotFound Not found

swagger:response requestPasswordRecoveryNotFound
*/
type RequestPasswordRecoveryNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.NotFoundResponse `json:"body,omitempty"`
}

// NewRequestPasswordRecoveryNotFound creates RequestPasswordRecoveryNotFound with default headers values
func NewRequestPasswordRecoveryNotFound() *RequestPasswordRecoveryNotFound {

	return &RequestPasswordRecoveryNotFound{}
}

// WithPayload adds the payload to the request password recovery not found response
func (o *RequestPasswordRecoveryNotFound) WithPayload(payload *models.NotFoundResponse) *RequestPasswordRecoveryNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request password recovery not found response
func (o *RequestPasswordRecoveryNotFound) SetPayload(payload *models.NotFoundResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestPasswordRecoveryNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// RequestPasswordRecoveryInternalServerErrorCode is the HTTP code returned for type RequestPasswordRecoveryInternalServerError
const RequestPasswordRecoveryInternalServerErrorCode int = 500

/*RequestPasswordRecoveryInternalServerError Internal error

swagger:response requestPasswordRecoveryInternalServerError
*/
type RequestPasswordRecoveryInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewRequestPasswordRecoveryInternalServerError creates RequestPasswordRecoveryInternalServerError with default headers values
func NewRequestPasswordRecoveryInternalServerError() *RequestPasswordRecoveryInternalServerError {

	return &RequestPasswordRecoveryInternalServerError{}
}

// WithPayload adds the payload to the request password recovery internal server error response
func (o *RequestPasswordRecoveryInternalServerError) WithPayload(payload *models.ErrorResponse) *RequestPasswordRecoveryInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the request password recovery internal server error response
func (o *RequestPasswordRecoveryInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *RequestPasswordRecoveryInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
