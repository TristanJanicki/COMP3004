// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateUserAccountHandlerFunc turns a function with the right signature into a create user account handler
type CreateUserAccountHandlerFunc func(CreateUserAccountParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateUserAccountHandlerFunc) Handle(params CreateUserAccountParams) middleware.Responder {
	return fn(params)
}

// CreateUserAccountHandler interface for that can handle valid create user account params
type CreateUserAccountHandler interface {
	Handle(CreateUserAccountParams) middleware.Responder
}

// NewCreateUserAccount creates a new http.Handler for the create user account operation
func NewCreateUserAccount(ctx *middleware.Context, handler CreateUserAccountHandler) *CreateUserAccount {
	return &CreateUserAccount{Context: ctx, Handler: handler}
}

/*CreateUserAccount swagger:route POST /v1/users/accounts createUserAccount

Create a user account and invite them to the app. Only admins are allowed to perform this function

*/
type CreateUserAccount struct {
	Context *middleware.Context
	Handler CreateUserAccountHandler
}

func (o *CreateUserAccount) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateUserAccountParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
