// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/COMP3004/UserAccounts/pkg/gen/models"
)

// ExperimentsThresholdCreateOKCode is the HTTP code returned for type ExperimentsThresholdCreateOK
const ExperimentsThresholdCreateOKCode int = 200

/*ExperimentsThresholdCreateOK OK

swagger:response experimentsThresholdCreateOK
*/
type ExperimentsThresholdCreateOK struct {

	/*
	  In: Body
	*/
	Payload *models.OkResponse `json:"body,omitempty"`
}

// NewExperimentsThresholdCreateOK creates ExperimentsThresholdCreateOK with default headers values
func NewExperimentsThresholdCreateOK() *ExperimentsThresholdCreateOK {

	return &ExperimentsThresholdCreateOK{}
}

// WithPayload adds the payload to the experiments threshold create o k response
func (o *ExperimentsThresholdCreateOK) WithPayload(payload *models.OkResponse) *ExperimentsThresholdCreateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the experiments threshold create o k response
func (o *ExperimentsThresholdCreateOK) SetPayload(payload *models.OkResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExperimentsThresholdCreateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ExperimentsThresholdCreateUnauthorizedCode is the HTTP code returned for type ExperimentsThresholdCreateUnauthorized
const ExperimentsThresholdCreateUnauthorizedCode int = 401

/*ExperimentsThresholdCreateUnauthorized insufficient permissions/not allowed

swagger:response experimentsThresholdCreateUnauthorized
*/
type ExperimentsThresholdCreateUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.NotAllowedResponse `json:"body,omitempty"`
}

// NewExperimentsThresholdCreateUnauthorized creates ExperimentsThresholdCreateUnauthorized with default headers values
func NewExperimentsThresholdCreateUnauthorized() *ExperimentsThresholdCreateUnauthorized {

	return &ExperimentsThresholdCreateUnauthorized{}
}

// WithPayload adds the payload to the experiments threshold create unauthorized response
func (o *ExperimentsThresholdCreateUnauthorized) WithPayload(payload *models.NotAllowedResponse) *ExperimentsThresholdCreateUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the experiments threshold create unauthorized response
func (o *ExperimentsThresholdCreateUnauthorized) SetPayload(payload *models.NotAllowedResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExperimentsThresholdCreateUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ExperimentsThresholdCreateConflictCode is the HTTP code returned for type ExperimentsThresholdCreateConflict
const ExperimentsThresholdCreateConflictCode int = 409

/*ExperimentsThresholdCreateConflict Already exists

swagger:response experimentsThresholdCreateConflict
*/
type ExperimentsThresholdCreateConflict struct {

	/*
	  In: Body
	*/
	Payload *models.AlreadyExistsResponse `json:"body,omitempty"`
}

// NewExperimentsThresholdCreateConflict creates ExperimentsThresholdCreateConflict with default headers values
func NewExperimentsThresholdCreateConflict() *ExperimentsThresholdCreateConflict {

	return &ExperimentsThresholdCreateConflict{}
}

// WithPayload adds the payload to the experiments threshold create conflict response
func (o *ExperimentsThresholdCreateConflict) WithPayload(payload *models.AlreadyExistsResponse) *ExperimentsThresholdCreateConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the experiments threshold create conflict response
func (o *ExperimentsThresholdCreateConflict) SetPayload(payload *models.AlreadyExistsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExperimentsThresholdCreateConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ExperimentsThresholdCreateInternalServerErrorCode is the HTTP code returned for type ExperimentsThresholdCreateInternalServerError
const ExperimentsThresholdCreateInternalServerErrorCode int = 500

/*ExperimentsThresholdCreateInternalServerError Internal error

swagger:response experimentsThresholdCreateInternalServerError
*/
type ExperimentsThresholdCreateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewExperimentsThresholdCreateInternalServerError creates ExperimentsThresholdCreateInternalServerError with default headers values
func NewExperimentsThresholdCreateInternalServerError() *ExperimentsThresholdCreateInternalServerError {

	return &ExperimentsThresholdCreateInternalServerError{}
}

// WithPayload adds the payload to the experiments threshold create internal server error response
func (o *ExperimentsThresholdCreateInternalServerError) WithPayload(payload *models.ErrorResponse) *ExperimentsThresholdCreateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the experiments threshold create internal server error response
func (o *ExperimentsThresholdCreateInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExperimentsThresholdCreateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
