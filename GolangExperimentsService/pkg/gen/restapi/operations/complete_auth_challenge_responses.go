// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/COMP3004/UserAccounts/pkg/gen/models"
)

// CompleteAuthChallengeCreatedCode is the HTTP code returned for type CompleteAuthChallengeCreated
const CompleteAuthChallengeCreatedCode int = 201

/*CompleteAuthChallengeCreated OK

swagger:response completeAuthChallengeCreated
*/
type CompleteAuthChallengeCreated struct {

	/*
	  In: Body
	*/
	Payload *models.OkResponse `json:"body,omitempty"`
}

// NewCompleteAuthChallengeCreated creates CompleteAuthChallengeCreated with default headers values
func NewCompleteAuthChallengeCreated() *CompleteAuthChallengeCreated {

	return &CompleteAuthChallengeCreated{}
}

// WithPayload adds the payload to the complete auth challenge created response
func (o *CompleteAuthChallengeCreated) WithPayload(payload *models.OkResponse) *CompleteAuthChallengeCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the complete auth challenge created response
func (o *CompleteAuthChallengeCreated) SetPayload(payload *models.OkResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CompleteAuthChallengeCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CompleteAuthChallengeNotFoundCode is the HTTP code returned for type CompleteAuthChallengeNotFound
const CompleteAuthChallengeNotFoundCode int = 404

/*CompleteAuthChallengeNotFound Not found

swagger:response completeAuthChallengeNotFound
*/
type CompleteAuthChallengeNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.NotFoundResponse `json:"body,omitempty"`
}

// NewCompleteAuthChallengeNotFound creates CompleteAuthChallengeNotFound with default headers values
func NewCompleteAuthChallengeNotFound() *CompleteAuthChallengeNotFound {

	return &CompleteAuthChallengeNotFound{}
}

// WithPayload adds the payload to the complete auth challenge not found response
func (o *CompleteAuthChallengeNotFound) WithPayload(payload *models.NotFoundResponse) *CompleteAuthChallengeNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the complete auth challenge not found response
func (o *CompleteAuthChallengeNotFound) SetPayload(payload *models.NotFoundResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CompleteAuthChallengeNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CompleteAuthChallengeInternalServerErrorCode is the HTTP code returned for type CompleteAuthChallengeInternalServerError
const CompleteAuthChallengeInternalServerErrorCode int = 500

/*CompleteAuthChallengeInternalServerError Internal error

swagger:response completeAuthChallengeInternalServerError
*/
type CompleteAuthChallengeInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCompleteAuthChallengeInternalServerError creates CompleteAuthChallengeInternalServerError with default headers values
func NewCompleteAuthChallengeInternalServerError() *CompleteAuthChallengeInternalServerError {

	return &CompleteAuthChallengeInternalServerError{}
}

// WithPayload adds the payload to the complete auth challenge internal server error response
func (o *CompleteAuthChallengeInternalServerError) WithPayload(payload *models.ErrorResponse) *CompleteAuthChallengeInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the complete auth challenge internal server error response
func (o *CompleteAuthChallengeInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CompleteAuthChallengeInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
