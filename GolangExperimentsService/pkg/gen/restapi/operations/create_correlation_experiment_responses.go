// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/TristanJanicki/COMP3004/pkg/gen/models"
)

// CreateCorrelationExperimentOKCode is the HTTP code returned for type CreateCorrelationExperimentOK
const CreateCorrelationExperimentOKCode int = 200

/*CreateCorrelationExperimentOK OK

swagger:response createCorrelationExperimentOK
*/
type CreateCorrelationExperimentOK struct {

	/*
	  In: Body
	*/
	Payload *models.OkResponse `json:"body,omitempty"`
}

// NewCreateCorrelationExperimentOK creates CreateCorrelationExperimentOK with default headers values
func NewCreateCorrelationExperimentOK() *CreateCorrelationExperimentOK {

	return &CreateCorrelationExperimentOK{}
}

// WithPayload adds the payload to the create correlation experiment o k response
func (o *CreateCorrelationExperimentOK) WithPayload(payload *models.OkResponse) *CreateCorrelationExperimentOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create correlation experiment o k response
func (o *CreateCorrelationExperimentOK) SetPayload(payload *models.OkResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateCorrelationExperimentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateCorrelationExperimentUnauthorizedCode is the HTTP code returned for type CreateCorrelationExperimentUnauthorized
const CreateCorrelationExperimentUnauthorizedCode int = 401

/*CreateCorrelationExperimentUnauthorized insufficient permissions/not allowed

swagger:response createCorrelationExperimentUnauthorized
*/
type CreateCorrelationExperimentUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.NotAllowedResponse `json:"body,omitempty"`
}

// NewCreateCorrelationExperimentUnauthorized creates CreateCorrelationExperimentUnauthorized with default headers values
func NewCreateCorrelationExperimentUnauthorized() *CreateCorrelationExperimentUnauthorized {

	return &CreateCorrelationExperimentUnauthorized{}
}

// WithPayload adds the payload to the create correlation experiment unauthorized response
func (o *CreateCorrelationExperimentUnauthorized) WithPayload(payload *models.NotAllowedResponse) *CreateCorrelationExperimentUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create correlation experiment unauthorized response
func (o *CreateCorrelationExperimentUnauthorized) SetPayload(payload *models.NotAllowedResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateCorrelationExperimentUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateCorrelationExperimentConflictCode is the HTTP code returned for type CreateCorrelationExperimentConflict
const CreateCorrelationExperimentConflictCode int = 409

/*CreateCorrelationExperimentConflict Already exists

swagger:response createCorrelationExperimentConflict
*/
type CreateCorrelationExperimentConflict struct {

	/*
	  In: Body
	*/
	Payload *models.AlreadyExistsResponse `json:"body,omitempty"`
}

// NewCreateCorrelationExperimentConflict creates CreateCorrelationExperimentConflict with default headers values
func NewCreateCorrelationExperimentConflict() *CreateCorrelationExperimentConflict {

	return &CreateCorrelationExperimentConflict{}
}

// WithPayload adds the payload to the create correlation experiment conflict response
func (o *CreateCorrelationExperimentConflict) WithPayload(payload *models.AlreadyExistsResponse) *CreateCorrelationExperimentConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create correlation experiment conflict response
func (o *CreateCorrelationExperimentConflict) SetPayload(payload *models.AlreadyExistsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateCorrelationExperimentConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateCorrelationExperimentInternalServerErrorCode is the HTTP code returned for type CreateCorrelationExperimentInternalServerError
const CreateCorrelationExperimentInternalServerErrorCode int = 500

/*CreateCorrelationExperimentInternalServerError Internal error

swagger:response createCorrelationExperimentInternalServerError
*/
type CreateCorrelationExperimentInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateCorrelationExperimentInternalServerError creates CreateCorrelationExperimentInternalServerError with default headers values
func NewCreateCorrelationExperimentInternalServerError() *CreateCorrelationExperimentInternalServerError {

	return &CreateCorrelationExperimentInternalServerError{}
}

// WithPayload adds the payload to the create correlation experiment internal server error response
func (o *CreateCorrelationExperimentInternalServerError) WithPayload(payload *models.ErrorResponse) *CreateCorrelationExperimentInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create correlation experiment internal server error response
func (o *CreateCorrelationExperimentInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateCorrelationExperimentInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
