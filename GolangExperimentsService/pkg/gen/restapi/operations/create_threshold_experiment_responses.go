// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/TristanJanicki/COMP3004/pkg/gen/models"
)

// CreateThresholdExperimentOKCode is the HTTP code returned for type CreateThresholdExperimentOK
const CreateThresholdExperimentOKCode int = 200

/*CreateThresholdExperimentOK OK

swagger:response createThresholdExperimentOK
*/
type CreateThresholdExperimentOK struct {

	/*
	  In: Body
	*/
	Payload *models.OkResponse `json:"body,omitempty"`
}

// NewCreateThresholdExperimentOK creates CreateThresholdExperimentOK with default headers values
func NewCreateThresholdExperimentOK() *CreateThresholdExperimentOK {

	return &CreateThresholdExperimentOK{}
}

// WithPayload adds the payload to the create threshold experiment o k response
func (o *CreateThresholdExperimentOK) WithPayload(payload *models.OkResponse) *CreateThresholdExperimentOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create threshold experiment o k response
func (o *CreateThresholdExperimentOK) SetPayload(payload *models.OkResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateThresholdExperimentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateThresholdExperimentUnauthorizedCode is the HTTP code returned for type CreateThresholdExperimentUnauthorized
const CreateThresholdExperimentUnauthorizedCode int = 401

/*CreateThresholdExperimentUnauthorized insufficient permissions/not allowed

swagger:response createThresholdExperimentUnauthorized
*/
type CreateThresholdExperimentUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.NotAllowedResponse `json:"body,omitempty"`
}

// NewCreateThresholdExperimentUnauthorized creates CreateThresholdExperimentUnauthorized with default headers values
func NewCreateThresholdExperimentUnauthorized() *CreateThresholdExperimentUnauthorized {

	return &CreateThresholdExperimentUnauthorized{}
}

// WithPayload adds the payload to the create threshold experiment unauthorized response
func (o *CreateThresholdExperimentUnauthorized) WithPayload(payload *models.NotAllowedResponse) *CreateThresholdExperimentUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create threshold experiment unauthorized response
func (o *CreateThresholdExperimentUnauthorized) SetPayload(payload *models.NotAllowedResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateThresholdExperimentUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateThresholdExperimentConflictCode is the HTTP code returned for type CreateThresholdExperimentConflict
const CreateThresholdExperimentConflictCode int = 409

/*CreateThresholdExperimentConflict Already exists

swagger:response createThresholdExperimentConflict
*/
type CreateThresholdExperimentConflict struct {

	/*
	  In: Body
	*/
	Payload *models.AlreadyExistsResponse `json:"body,omitempty"`
}

// NewCreateThresholdExperimentConflict creates CreateThresholdExperimentConflict with default headers values
func NewCreateThresholdExperimentConflict() *CreateThresholdExperimentConflict {

	return &CreateThresholdExperimentConflict{}
}

// WithPayload adds the payload to the create threshold experiment conflict response
func (o *CreateThresholdExperimentConflict) WithPayload(payload *models.AlreadyExistsResponse) *CreateThresholdExperimentConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create threshold experiment conflict response
func (o *CreateThresholdExperimentConflict) SetPayload(payload *models.AlreadyExistsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateThresholdExperimentConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CreateThresholdExperimentInternalServerErrorCode is the HTTP code returned for type CreateThresholdExperimentInternalServerError
const CreateThresholdExperimentInternalServerErrorCode int = 500

/*CreateThresholdExperimentInternalServerError Internal error

swagger:response createThresholdExperimentInternalServerError
*/
type CreateThresholdExperimentInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewCreateThresholdExperimentInternalServerError creates CreateThresholdExperimentInternalServerError with default headers values
func NewCreateThresholdExperimentInternalServerError() *CreateThresholdExperimentInternalServerError {

	return &CreateThresholdExperimentInternalServerError{}
}

// WithPayload adds the payload to the create threshold experiment internal server error response
func (o *CreateThresholdExperimentInternalServerError) WithPayload(payload *models.ErrorResponse) *CreateThresholdExperimentInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the create threshold experiment internal server error response
func (o *CreateThresholdExperimentInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CreateThresholdExperimentInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
