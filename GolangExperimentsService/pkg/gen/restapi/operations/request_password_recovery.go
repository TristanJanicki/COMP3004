// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// RequestPasswordRecoveryHandlerFunc turns a function with the right signature into a request password recovery handler
type RequestPasswordRecoveryHandlerFunc func(RequestPasswordRecoveryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn RequestPasswordRecoveryHandlerFunc) Handle(params RequestPasswordRecoveryParams) middleware.Responder {
	return fn(params)
}

// RequestPasswordRecoveryHandler interface for that can handle valid request password recovery params
type RequestPasswordRecoveryHandler interface {
	Handle(RequestPasswordRecoveryParams) middleware.Responder
}

// NewRequestPasswordRecovery creates a new http.Handler for the request password recovery operation
func NewRequestPasswordRecovery(ctx *middleware.Context, handler RequestPasswordRecoveryHandler) *RequestPasswordRecovery {
	return &RequestPasswordRecovery{Context: ctx, Handler: handler}
}

/*RequestPasswordRecovery swagger:route GET /v1/users/recovery requestPasswordRecovery

Attempts to perform a password change in the case a user forgets their password (emails a new one to them).

*/
type RequestPasswordRecovery struct {
	Context *middleware.Context
	Handler RequestPasswordRecoveryHandler
}

func (o *RequestPasswordRecovery) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewRequestPasswordRecoveryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
