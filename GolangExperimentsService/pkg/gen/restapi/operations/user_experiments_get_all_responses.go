// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/COMP3004/UserAccounts/pkg/gen/models"
)

// UserExperimentsGetAllOKCode is the HTTP code returned for type UserExperimentsGetAllOK
const UserExperimentsGetAllOKCode int = 200

/*UserExperimentsGetAllOK OK

swagger:response userExperimentsGetAllOK
*/
type UserExperimentsGetAllOK struct {

	/*
	  In: Body
	*/
	Payload *models.GetExperimentsResult `json:"body,omitempty"`
}

// NewUserExperimentsGetAllOK creates UserExperimentsGetAllOK with default headers values
func NewUserExperimentsGetAllOK() *UserExperimentsGetAllOK {

	return &UserExperimentsGetAllOK{}
}

// WithPayload adds the payload to the user experiments get all o k response
func (o *UserExperimentsGetAllOK) WithPayload(payload *models.GetExperimentsResult) *UserExperimentsGetAllOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user experiments get all o k response
func (o *UserExperimentsGetAllOK) SetPayload(payload *models.GetExperimentsResult) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserExperimentsGetAllOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserExperimentsGetAllUnauthorizedCode is the HTTP code returned for type UserExperimentsGetAllUnauthorized
const UserExperimentsGetAllUnauthorizedCode int = 401

/*UserExperimentsGetAllUnauthorized insufficient permissions/not allowed

swagger:response userExperimentsGetAllUnauthorized
*/
type UserExperimentsGetAllUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.NotAllowedResponse `json:"body,omitempty"`
}

// NewUserExperimentsGetAllUnauthorized creates UserExperimentsGetAllUnauthorized with default headers values
func NewUserExperimentsGetAllUnauthorized() *UserExperimentsGetAllUnauthorized {

	return &UserExperimentsGetAllUnauthorized{}
}

// WithPayload adds the payload to the user experiments get all unauthorized response
func (o *UserExperimentsGetAllUnauthorized) WithPayload(payload *models.NotAllowedResponse) *UserExperimentsGetAllUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user experiments get all unauthorized response
func (o *UserExperimentsGetAllUnauthorized) SetPayload(payload *models.NotAllowedResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserExperimentsGetAllUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserExperimentsGetAllConflictCode is the HTTP code returned for type UserExperimentsGetAllConflict
const UserExperimentsGetAllConflictCode int = 409

/*UserExperimentsGetAllConflict Already exists

swagger:response userExperimentsGetAllConflict
*/
type UserExperimentsGetAllConflict struct {

	/*
	  In: Body
	*/
	Payload *models.AlreadyExistsResponse `json:"body,omitempty"`
}

// NewUserExperimentsGetAllConflict creates UserExperimentsGetAllConflict with default headers values
func NewUserExperimentsGetAllConflict() *UserExperimentsGetAllConflict {

	return &UserExperimentsGetAllConflict{}
}

// WithPayload adds the payload to the user experiments get all conflict response
func (o *UserExperimentsGetAllConflict) WithPayload(payload *models.AlreadyExistsResponse) *UserExperimentsGetAllConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user experiments get all conflict response
func (o *UserExperimentsGetAllConflict) SetPayload(payload *models.AlreadyExistsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserExperimentsGetAllConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// UserExperimentsGetAllInternalServerErrorCode is the HTTP code returned for type UserExperimentsGetAllInternalServerError
const UserExperimentsGetAllInternalServerErrorCode int = 500

/*UserExperimentsGetAllInternalServerError Internal error

swagger:response userExperimentsGetAllInternalServerError
*/
type UserExperimentsGetAllInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewUserExperimentsGetAllInternalServerError creates UserExperimentsGetAllInternalServerError with default headers values
func NewUserExperimentsGetAllInternalServerError() *UserExperimentsGetAllInternalServerError {

	return &UserExperimentsGetAllInternalServerError{}
}

// WithPayload adds the payload to the user experiments get all internal server error response
func (o *UserExperimentsGetAllInternalServerError) WithPayload(payload *models.ErrorResponse) *UserExperimentsGetAllInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the user experiments get all internal server error response
func (o *UserExperimentsGetAllInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *UserExperimentsGetAllInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
