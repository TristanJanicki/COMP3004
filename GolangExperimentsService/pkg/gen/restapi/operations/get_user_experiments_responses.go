// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/TristanJanicki/COMP3004/pkg/gen/models"
)

// GetUserExperimentsOKCode is the HTTP code returned for type GetUserExperimentsOK
const GetUserExperimentsOKCode int = 200

/*GetUserExperimentsOK OK

swagger:response getUserExperimentsOK
*/
type GetUserExperimentsOK struct {

	/*
	  In: Body
	*/
	Payload *models.GetExperimentsResult `json:"body,omitempty"`
}

// NewGetUserExperimentsOK creates GetUserExperimentsOK with default headers values
func NewGetUserExperimentsOK() *GetUserExperimentsOK {

	return &GetUserExperimentsOK{}
}

// WithPayload adds the payload to the get user experiments o k response
func (o *GetUserExperimentsOK) WithPayload(payload *models.GetExperimentsResult) *GetUserExperimentsOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user experiments o k response
func (o *GetUserExperimentsOK) SetPayload(payload *models.GetExperimentsResult) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserExperimentsOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserExperimentsUnauthorizedCode is the HTTP code returned for type GetUserExperimentsUnauthorized
const GetUserExperimentsUnauthorizedCode int = 401

/*GetUserExperimentsUnauthorized insufficient permissions/not allowed

swagger:response getUserExperimentsUnauthorized
*/
type GetUserExperimentsUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.NotAllowedResponse `json:"body,omitempty"`
}

// NewGetUserExperimentsUnauthorized creates GetUserExperimentsUnauthorized with default headers values
func NewGetUserExperimentsUnauthorized() *GetUserExperimentsUnauthorized {

	return &GetUserExperimentsUnauthorized{}
}

// WithPayload adds the payload to the get user experiments unauthorized response
func (o *GetUserExperimentsUnauthorized) WithPayload(payload *models.NotAllowedResponse) *GetUserExperimentsUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user experiments unauthorized response
func (o *GetUserExperimentsUnauthorized) SetPayload(payload *models.NotAllowedResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserExperimentsUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserExperimentsConflictCode is the HTTP code returned for type GetUserExperimentsConflict
const GetUserExperimentsConflictCode int = 409

/*GetUserExperimentsConflict Already exists

swagger:response getUserExperimentsConflict
*/
type GetUserExperimentsConflict struct {

	/*
	  In: Body
	*/
	Payload *models.AlreadyExistsResponse `json:"body,omitempty"`
}

// NewGetUserExperimentsConflict creates GetUserExperimentsConflict with default headers values
func NewGetUserExperimentsConflict() *GetUserExperimentsConflict {

	return &GetUserExperimentsConflict{}
}

// WithPayload adds the payload to the get user experiments conflict response
func (o *GetUserExperimentsConflict) WithPayload(payload *models.AlreadyExistsResponse) *GetUserExperimentsConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user experiments conflict response
func (o *GetUserExperimentsConflict) SetPayload(payload *models.AlreadyExistsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserExperimentsConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetUserExperimentsInternalServerErrorCode is the HTTP code returned for type GetUserExperimentsInternalServerError
const GetUserExperimentsInternalServerErrorCode int = 500

/*GetUserExperimentsInternalServerError Internal error

swagger:response getUserExperimentsInternalServerError
*/
type GetUserExperimentsInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewGetUserExperimentsInternalServerError creates GetUserExperimentsInternalServerError with default headers values
func NewGetUserExperimentsInternalServerError() *GetUserExperimentsInternalServerError {

	return &GetUserExperimentsInternalServerError{}
}

// WithPayload adds the payload to the get user experiments internal server error response
func (o *GetUserExperimentsInternalServerError) WithPayload(payload *models.ErrorResponse) *GetUserExperimentsInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get user experiments internal server error response
func (o *GetUserExperimentsInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetUserExperimentsInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
