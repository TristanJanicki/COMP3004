// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	models "github.com/COMP3004/UserAccounts/pkg/gen/models"
)

// ExperimentsCorrelationCreateOKCode is the HTTP code returned for type ExperimentsCorrelationCreateOK
const ExperimentsCorrelationCreateOKCode int = 200

/*ExperimentsCorrelationCreateOK OK

swagger:response experimentsCorrelationCreateOK
*/
type ExperimentsCorrelationCreateOK struct {

	/*
	  In: Body
	*/
	Payload *models.OkResponse `json:"body,omitempty"`
}

// NewExperimentsCorrelationCreateOK creates ExperimentsCorrelationCreateOK with default headers values
func NewExperimentsCorrelationCreateOK() *ExperimentsCorrelationCreateOK {

	return &ExperimentsCorrelationCreateOK{}
}

// WithPayload adds the payload to the experiments correlation create o k response
func (o *ExperimentsCorrelationCreateOK) WithPayload(payload *models.OkResponse) *ExperimentsCorrelationCreateOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the experiments correlation create o k response
func (o *ExperimentsCorrelationCreateOK) SetPayload(payload *models.OkResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExperimentsCorrelationCreateOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ExperimentsCorrelationCreateUnauthorizedCode is the HTTP code returned for type ExperimentsCorrelationCreateUnauthorized
const ExperimentsCorrelationCreateUnauthorizedCode int = 401

/*ExperimentsCorrelationCreateUnauthorized insufficient permissions/not allowed

swagger:response experimentsCorrelationCreateUnauthorized
*/
type ExperimentsCorrelationCreateUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.NotAllowedResponse `json:"body,omitempty"`
}

// NewExperimentsCorrelationCreateUnauthorized creates ExperimentsCorrelationCreateUnauthorized with default headers values
func NewExperimentsCorrelationCreateUnauthorized() *ExperimentsCorrelationCreateUnauthorized {

	return &ExperimentsCorrelationCreateUnauthorized{}
}

// WithPayload adds the payload to the experiments correlation create unauthorized response
func (o *ExperimentsCorrelationCreateUnauthorized) WithPayload(payload *models.NotAllowedResponse) *ExperimentsCorrelationCreateUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the experiments correlation create unauthorized response
func (o *ExperimentsCorrelationCreateUnauthorized) SetPayload(payload *models.NotAllowedResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExperimentsCorrelationCreateUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ExperimentsCorrelationCreateConflictCode is the HTTP code returned for type ExperimentsCorrelationCreateConflict
const ExperimentsCorrelationCreateConflictCode int = 409

/*ExperimentsCorrelationCreateConflict Already exists

swagger:response experimentsCorrelationCreateConflict
*/
type ExperimentsCorrelationCreateConflict struct {

	/*
	  In: Body
	*/
	Payload *models.AlreadyExistsResponse `json:"body,omitempty"`
}

// NewExperimentsCorrelationCreateConflict creates ExperimentsCorrelationCreateConflict with default headers values
func NewExperimentsCorrelationCreateConflict() *ExperimentsCorrelationCreateConflict {

	return &ExperimentsCorrelationCreateConflict{}
}

// WithPayload adds the payload to the experiments correlation create conflict response
func (o *ExperimentsCorrelationCreateConflict) WithPayload(payload *models.AlreadyExistsResponse) *ExperimentsCorrelationCreateConflict {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the experiments correlation create conflict response
func (o *ExperimentsCorrelationCreateConflict) SetPayload(payload *models.AlreadyExistsResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExperimentsCorrelationCreateConflict) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(409)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ExperimentsCorrelationCreateInternalServerErrorCode is the HTTP code returned for type ExperimentsCorrelationCreateInternalServerError
const ExperimentsCorrelationCreateInternalServerErrorCode int = 500

/*ExperimentsCorrelationCreateInternalServerError Internal error

swagger:response experimentsCorrelationCreateInternalServerError
*/
type ExperimentsCorrelationCreateInternalServerError struct {

	/*
	  In: Body
	*/
	Payload *models.ErrorResponse `json:"body,omitempty"`
}

// NewExperimentsCorrelationCreateInternalServerError creates ExperimentsCorrelationCreateInternalServerError with default headers values
func NewExperimentsCorrelationCreateInternalServerError() *ExperimentsCorrelationCreateInternalServerError {

	return &ExperimentsCorrelationCreateInternalServerError{}
}

// WithPayload adds the payload to the experiments correlation create internal server error response
func (o *ExperimentsCorrelationCreateInternalServerError) WithPayload(payload *models.ErrorResponse) *ExperimentsCorrelationCreateInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the experiments correlation create internal server error response
func (o *ExperimentsCorrelationCreateInternalServerError) SetPayload(payload *models.ErrorResponse) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ExperimentsCorrelationCreateInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
