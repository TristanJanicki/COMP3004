// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CompletePasswordRecoveryHandlerFunc turns a function with the right signature into a complete password recovery handler
type CompletePasswordRecoveryHandlerFunc func(CompletePasswordRecoveryParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CompletePasswordRecoveryHandlerFunc) Handle(params CompletePasswordRecoveryParams) middleware.Responder {
	return fn(params)
}

// CompletePasswordRecoveryHandler interface for that can handle valid complete password recovery params
type CompletePasswordRecoveryHandler interface {
	Handle(CompletePasswordRecoveryParams) middleware.Responder
}

// NewCompletePasswordRecovery creates a new http.Handler for the complete password recovery operation
func NewCompletePasswordRecovery(ctx *middleware.Context, handler CompletePasswordRecoveryHandler) *CompletePasswordRecovery {
	return &CompletePasswordRecovery{Context: ctx, Handler: handler}
}

/*CompletePasswordRecovery swagger:route POST /v1/users/recovery completePasswordRecovery

Submit password recovery parameters to complete the process

*/
type CompletePasswordRecovery struct {
	Context *middleware.Context
	Handler CompletePasswordRecoveryHandler
}

func (o *CompletePasswordRecovery) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCompletePasswordRecoveryParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
