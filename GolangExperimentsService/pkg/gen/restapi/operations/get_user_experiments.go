// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUserExperimentsHandlerFunc turns a function with the right signature into a get user experiments handler
type GetUserExperimentsHandlerFunc func(GetUserExperimentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUserExperimentsHandlerFunc) Handle(params GetUserExperimentsParams) middleware.Responder {
	return fn(params)
}

// GetUserExperimentsHandler interface for that can handle valid get user experiments params
type GetUserExperimentsHandler interface {
	Handle(GetUserExperimentsParams) middleware.Responder
}

// NewGetUserExperiments creates a new http.Handler for the get user experiments operation
func NewGetUserExperiments(ctx *middleware.Context, handler GetUserExperimentsHandler) *GetUserExperiments {
	return &GetUserExperiments{Context: ctx, Handler: handler}
}

/*GetUserExperiments swagger:route GET /v1/users/experiments getUserExperiments

Get all experiments associated/owned by a user

*/
type GetUserExperiments struct {
	Context *middleware.Context
	Handler GetUserExperimentsHandler
}

func (o *GetUserExperiments) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUserExperimentsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
