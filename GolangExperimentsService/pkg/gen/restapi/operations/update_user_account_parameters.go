// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/COMP3004/UserAccounts/pkg/gen/models"
)

// NewUpdateUserAccountParams creates a new UpdateUserAccountParams object
// no default values defined in spec.
func NewUpdateUserAccountParams() UpdateUserAccountParams {

	return UpdateUserAccountParams{}
}

// UpdateUserAccountParams contains all the bound params for the update user account operation
// typically these are obtained from a http.Request
//
// swagger:parameters UpdateUserAccount
type UpdateUserAccountParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Request id
	  Required: true
	  In: header
	*/
	XRequestID strfmt.UUID
	/*Stock Advisor user id for the user who is making the request
	  Required: true
	  In: header
	*/
	CallerUserID string
	/*
	  Required: true
	  In: body
	*/
	UserAccount *models.ExistingUserAccount
	/*Stock Advisor user id of account to be updated
	  Required: true
	  In: path
	*/
	UserID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUpdateUserAccountParams() beforehand.
func (o *UpdateUserAccountParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	if err := o.bindXRequestID(r.Header[http.CanonicalHeaderKey("X-Request-ID")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if err := o.bindCallerUserID(r.Header[http.CanonicalHeaderKey("caller-user-id")], true, route.Formats); err != nil {
		res = append(res, err)
	}

	if runtime.HasBody(r) {
		defer r.Body.Close()
		var body models.ExistingUserAccount
		if err := route.Consumer.Consume(r.Body, &body); err != nil {
			if err == io.EOF {
				res = append(res, errors.Required("userAccount", "body"))
			} else {
				res = append(res, errors.NewParseError("userAccount", "body", "", err))
			}
		} else {
			// validate body object
			if err := body.Validate(route.Formats); err != nil {
				res = append(res, err)
			}

			if len(res) == 0 {
				o.UserAccount = &body
			}
		}
	} else {
		res = append(res, errors.Required("userAccount", "body"))
	}
	rUserID, rhkUserID, _ := route.Params.GetOK("user_id")
	if err := o.bindUserID(rUserID, rhkUserID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindXRequestID binds and validates parameter XRequestID from header.
func (o *UpdateUserAccountParams) bindXRequestID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("X-Request-ID", "header")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("X-Request-ID", "header", raw); err != nil {
		return err
	}

	// Format: uuid
	value, err := formats.Parse("uuid", raw)
	if err != nil {
		return errors.InvalidType("X-Request-ID", "header", "strfmt.UUID", raw)
	}
	o.XRequestID = *(value.(*strfmt.UUID))

	if err := o.validateXRequestID(formats); err != nil {
		return err
	}

	return nil
}

// validateXRequestID carries on validations for parameter XRequestID
func (o *UpdateUserAccountParams) validateXRequestID(formats strfmt.Registry) error {

	if err := validate.FormatOf("X-Request-ID", "header", "uuid", o.XRequestID.String(), formats); err != nil {
		return err
	}
	return nil
}

// bindCallerUserID binds and validates parameter CallerUserID from header.
func (o *UpdateUserAccountParams) bindCallerUserID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("caller-user-id", "header")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true

	if err := validate.RequiredString("caller-user-id", "header", raw); err != nil {
		return err
	}

	o.CallerUserID = raw

	return nil
}

// bindUserID binds and validates parameter UserID from path.
func (o *UpdateUserAccountParams) bindUserID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.UserID = raw

	return nil
}
