// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "A microservice for managing a experiments",
    "title": "Experiments Service",
    "version": "0.1.0"
  },
  "paths": {
    "/v1/experiments/correlation": {
      "post": {
        "description": "Add a new experiment to a users account",
        "operationId": "CreateCorrelationExperiment",
        "parameters": [
          {
            "type": "string",
            "description": "id token obtained from AWS Cognito",
            "name": "idToken",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "the users ID to associate the experiment with",
            "name": "user-id",
            "in": "header",
            "required": true
          },
          {
            "name": "experiment",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/newCorrelationExperiment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "insufficient permissions/not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/alreadyExistsResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/experiments/threshold": {
      "post": {
        "description": "Add a new experiment to a users account",
        "operationId": "CreateThresholdExperiment",
        "parameters": [
          {
            "type": "string",
            "description": "id token obtained from AWS Cognito",
            "name": "idToken",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "the users ID to associate the experiment with",
            "name": "user-id",
            "in": "header",
            "required": true
          },
          {
            "name": "experiment",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/newThresholdExperiment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "insufficient permissions/not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/alreadyExistsResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/experiments": {
      "get": {
        "description": "Get all experiments associated/owned by a user",
        "operationId": "GetUserExperiments",
        "parameters": [
          {
            "type": "string",
            "description": "access token obtained from AWS Cognito",
            "name": "idToken",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "the users ID to associate the experiment with",
            "name": "user-id",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/getExperimentsResult"
            }
          },
          "401": {
            "description": "insufficient permissions/not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/alreadyExistsResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a experiment from a users experiments list",
        "operationId": "DeleteUserExperiment",
        "parameters": [
          {
            "type": "string",
            "description": "access token obtained from AWS Cognito",
            "name": "idToken",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "The database ID of the experiment to unsubscribe the user from",
            "name": "experiment-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "the users ID to associate the experiment with",
            "name": "user-id",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "insufficient permissions/not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/alreadyExistsResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "alreadyExistsResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Entity already exists"
        }
      }
    },
    "badInputResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Bad input"
        }
      }
    },
    "errorResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Internal error"
        }
      }
    },
    "existingCorrelationExperiment": {
      "type": "object",
      "required": [
        "experiment_id",
        "asset_1",
        "asset_2",
        "correlation",
        "asset_combo"
      ],
      "properties": {
        "asset_1": {
          "type": "string"
        },
        "asset_1_deltas": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "asset_2": {
          "type": "string"
        },
        "asset_2_deltas": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "asset_combo": {
          "type": "string",
          "enum": [
            "equity_equity",
            "equity_currency",
            "currency_equity",
            "currency_currency"
          ]
        },
        "correlation": {
          "type": "number"
        },
        "experiment_id": {
          "type": "string"
        }
      }
    },
    "existingThresholdExperiment": {
      "type": "object",
      "properties": {
        "directional_bias": {
          "type": "string",
          "enum": [
            "crosses_above",
            "crosses_below"
          ]
        },
        "event_dates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "experiment_id": {
          "type": "string"
        },
        "indicator": {
          "type": "string"
        },
        "price_delta_mean": {
          "type": "number"
        },
        "price_delta_std_dev": {
          "type": "number"
        },
        "price_deltas": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "shapiro_p": {
          "type": "number"
        },
        "shapiro_w": {
          "type": "number"
        },
        "status": {
          "type": "string"
        },
        "t_test_p": {
          "type": "number"
        },
        "t_test_t": {
          "type": "number"
        },
        "threshold": {
          "type": "integer"
        },
        "ticker": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "volumes": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "volumes_mean": {
          "type": "number"
        }
      }
    },
    "getExperimentsResult": {
      "required": [
        "thresholds",
        "correlations"
      ],
      "properties": {
        "correlations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/existingCorrelationExperiment"
          }
        },
        "thresholds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/existingThresholdExperiment"
          }
        }
      }
    },
    "newCorrelationExperiment": {
      "type": "object",
      "required": [
        "asset_1",
        "asset_2",
        "asset_combo"
      ],
      "properties": {
        "asset_1": {
          "type": "string"
        },
        "asset_2": {
          "type": "string"
        },
        "asset_combo": {
          "type": "string",
          "enum": [
            "equity_currency",
            "equity_equity"
          ]
        }
      }
    },
    "newThresholdExperiment": {
      "type": "object",
      "required": [
        "indicator",
        "threshold",
        "ticker"
      ],
      "properties": {
        "indicator": {
          "type": "string"
        },
        "threshold": {
          "type": "integer"
        },
        "ticker": {
          "type": "string"
        }
      }
    },
    "notAllowedResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Not allowed"
        }
      }
    },
    "notFoundResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Not found"
        }
      }
    },
    "okResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "OK"
        }
      }
    },
    "postOkResponse": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "maxLength": 36
        }
      }
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "description": "A microservice for managing a experiments",
    "title": "Experiments Service",
    "version": "0.1.0"
  },
  "paths": {
    "/v1/experiments/correlation": {
      "post": {
        "description": "Add a new experiment to a users account",
        "operationId": "CreateCorrelationExperiment",
        "parameters": [
          {
            "type": "string",
            "description": "id token obtained from AWS Cognito",
            "name": "idToken",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "the users ID to associate the experiment with",
            "name": "user-id",
            "in": "header",
            "required": true
          },
          {
            "name": "experiment",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/newCorrelationExperiment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "insufficient permissions/not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/alreadyExistsResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/experiments/threshold": {
      "post": {
        "description": "Add a new experiment to a users account",
        "operationId": "CreateThresholdExperiment",
        "parameters": [
          {
            "type": "string",
            "description": "id token obtained from AWS Cognito",
            "name": "idToken",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "the users ID to associate the experiment with",
            "name": "user-id",
            "in": "header",
            "required": true
          },
          {
            "name": "experiment",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/newThresholdExperiment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "insufficient permissions/not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/alreadyExistsResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    },
    "/v1/users/experiments": {
      "get": {
        "description": "Get all experiments associated/owned by a user",
        "operationId": "GetUserExperiments",
        "parameters": [
          {
            "type": "string",
            "description": "access token obtained from AWS Cognito",
            "name": "idToken",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "the users ID to associate the experiment with",
            "name": "user-id",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/getExperimentsResult"
            }
          },
          "401": {
            "description": "insufficient permissions/not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/alreadyExistsResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      },
      "delete": {
        "description": "Delete a experiment from a users experiments list",
        "operationId": "DeleteUserExperiment",
        "parameters": [
          {
            "type": "string",
            "description": "access token obtained from AWS Cognito",
            "name": "idToken",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "The database ID of the experiment to unsubscribe the user from",
            "name": "experiment-id",
            "in": "header",
            "required": true
          },
          {
            "type": "string",
            "description": "the users ID to associate the experiment with",
            "name": "user-id",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/okResponse"
            }
          },
          "401": {
            "description": "insufficient permissions/not allowed",
            "schema": {
              "$ref": "#/definitions/notAllowedResponse"
            }
          },
          "409": {
            "description": "Already exists",
            "schema": {
              "$ref": "#/definitions/alreadyExistsResponse"
            }
          },
          "500": {
            "description": "Internal error",
            "schema": {
              "$ref": "#/definitions/errorResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "alreadyExistsResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Entity already exists"
        }
      }
    },
    "badInputResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Bad input"
        }
      }
    },
    "errorResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Internal error"
        }
      }
    },
    "existingCorrelationExperiment": {
      "type": "object",
      "required": [
        "experiment_id",
        "asset_1",
        "asset_2",
        "correlation",
        "asset_combo"
      ],
      "properties": {
        "asset_1": {
          "type": "string"
        },
        "asset_1_deltas": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "asset_2": {
          "type": "string"
        },
        "asset_2_deltas": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "asset_combo": {
          "type": "string",
          "enum": [
            "equity_equity",
            "equity_currency",
            "currency_equity",
            "currency_currency"
          ]
        },
        "correlation": {
          "type": "number"
        },
        "experiment_id": {
          "type": "string"
        }
      }
    },
    "existingThresholdExperiment": {
      "type": "object",
      "properties": {
        "directional_bias": {
          "type": "string",
          "enum": [
            "crosses_above",
            "crosses_below"
          ]
        },
        "event_dates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "experiment_id": {
          "type": "string"
        },
        "indicator": {
          "type": "string"
        },
        "price_delta_mean": {
          "type": "number"
        },
        "price_delta_std_dev": {
          "type": "number"
        },
        "price_deltas": {
          "type": "array",
          "items": {
            "type": "number"
          }
        },
        "shapiro_p": {
          "type": "number"
        },
        "shapiro_w": {
          "type": "number"
        },
        "status": {
          "type": "string"
        },
        "t_test_p": {
          "type": "number"
        },
        "t_test_t": {
          "type": "number"
        },
        "threshold": {
          "type": "integer"
        },
        "ticker": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "volumes": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "volumes_mean": {
          "type": "number"
        }
      }
    },
    "getExperimentsResult": {
      "required": [
        "thresholds",
        "correlations"
      ],
      "properties": {
        "correlations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/existingCorrelationExperiment"
          }
        },
        "thresholds": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/existingThresholdExperiment"
          }
        }
      }
    },
    "newCorrelationExperiment": {
      "type": "object",
      "required": [
        "asset_1",
        "asset_2",
        "asset_combo"
      ],
      "properties": {
        "asset_1": {
          "type": "string"
        },
        "asset_2": {
          "type": "string"
        },
        "asset_combo": {
          "type": "string",
          "enum": [
            "equity_currency",
            "equity_equity"
          ]
        }
      }
    },
    "newThresholdExperiment": {
      "type": "object",
      "required": [
        "indicator",
        "threshold",
        "ticker"
      ],
      "properties": {
        "indicator": {
          "type": "string"
        },
        "threshold": {
          "type": "integer"
        },
        "ticker": {
          "type": "string"
        }
      }
    },
    "notAllowedResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Not allowed"
        }
      }
    },
    "notFoundResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "Not found"
        }
      }
    },
    "okResponse": {
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "type": "string",
          "default": "OK"
        }
      }
    },
    "postOkResponse": {
      "type": "object",
      "required": [
        "id"
      ],
      "properties": {
        "id": {
          "type": "string",
          "maxLength": 36
        }
      }
    }
  }
}`))
}
